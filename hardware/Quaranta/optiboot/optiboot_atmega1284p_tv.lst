
optiboot_atmega1284p_tv.elf:     ファイル形式 elf32-avr

セクション:
索引名          サイズ      VMA       LMA       File off  Algn
  0 .text         000001f4  0000fc00  0000fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000ac8  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000091c  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY
  4 .version      00000002  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY

セクション .text の逆アセンブル:

0000fc00 <main>:
    fc00:	11 24       	eor	r1, r1
    fc02:	84 b7       	in	r24, 0x34	; 52
    fc04:	14 be       	out	0x34, r1	; 52
    fc06:	81 ff       	sbrs	r24, 1
    fc08:	f0 d0       	rcall	.+480    	; 0xfdea <appStart>
    fc0a:	85 e0       	ldi	r24, 0x05	; 5
    fc0c:	80 93 81 00 	sts	0x0081, r24
    fc10:	82 e0       	ldi	r24, 0x02	; 2
    fc12:	80 93 c0 00 	sts	0x00C0, r24
    fc16:	88 e1       	ldi	r24, 0x18	; 24
    fc18:	80 93 c1 00 	sts	0x00C1, r24
    fc1c:	86 e0       	ldi	r24, 0x06	; 6
    fc1e:	80 93 c2 00 	sts	0x00C2, r24
    fc22:	8f e0       	ldi	r24, 0x0F	; 15
    fc24:	80 93 c4 00 	sts	0x00C4, r24
    fc28:	8e e0       	ldi	r24, 0x0E	; 14
    fc2a:	ca d0       	rcall	.+404    	; 0xfdc0 <watchdogConfig>
    fc2c:	20 9a       	sbi	0x04, 0	; 4
    fc2e:	26 e0       	ldi	r18, 0x06	; 6
    fc30:	87 e9       	ldi	r24, 0x97	; 151
    fc32:	9c ef       	ldi	r25, 0xFC	; 252
    fc34:	31 e0       	ldi	r19, 0x01	; 1
    fc36:	90 93 85 00 	sts	0x0085, r25
    fc3a:	80 93 84 00 	sts	0x0084, r24
    fc3e:	36 bb       	out	0x16, r19	; 22
    fc40:	b0 9b       	sbis	0x16, 0	; 22
    fc42:	fe cf       	rjmp	.-4      	; 0xfc40 <main+0x40>
    fc44:	18 9a       	sbi	0x03, 0	; 3
    fc46:	a8 95       	wdr
    fc48:	21 50       	subi	r18, 0x01	; 1
    fc4a:	a9 f7       	brne	.-22     	; 0xfc36 <main+0x36>
    fc4c:	81 2c       	mov	r8, r1
    fc4e:	91 2c       	mov	r9, r1
    fc50:	ee 24       	eor	r14, r14
    fc52:	e3 94       	inc	r14
    fc54:	95 e0       	ldi	r25, 0x05	; 5
    fc56:	d9 2e       	mov	r13, r25
    fc58:	21 e1       	ldi	r18, 0x11	; 17
    fc5a:	c2 2e       	mov	r12, r18
    fc5c:	33 e0       	ldi	r19, 0x03	; 3
    fc5e:	f3 2e       	mov	r15, r19
    fc60:	a3 d0       	rcall	.+326    	; 0xfda8 <getch>
    fc62:	81 34       	cpi	r24, 0x41	; 65
    fc64:	89 f4       	brne	.+34     	; 0xfc88 <main+0x88>
    fc66:	a0 d0       	rcall	.+320    	; 0xfda8 <getch>
    fc68:	89 83       	std	Y+1, r24	; 0x01
    fc6a:	b0 d0       	rcall	.+352    	; 0xfdcc <verifySpace>
    fc6c:	89 81       	ldd	r24, Y+1	; 0x01
    fc6e:	82 38       	cpi	r24, 0x82	; 130
    fc70:	19 f4       	brne	.+6      	; 0xfc78 <main+0x78>
    fc72:	84 e0       	ldi	r24, 0x04	; 4
    fc74:	92 d0       	rcall	.+292    	; 0xfd9a <putch>
    fc76:	8e c0       	rjmp	.+284    	; 0xfd94 <main+0x194>
    fc78:	81 38       	cpi	r24, 0x81	; 129
    fc7a:	19 f4       	brne	.+6      	; 0xfc82 <main+0x82>
    fc7c:	84 e0       	ldi	r24, 0x04	; 4
    fc7e:	8d d0       	rcall	.+282    	; 0xfd9a <putch>
    fc80:	89 c0       	rjmp	.+274    	; 0xfd94 <main+0x194>
    fc82:	83 e0       	ldi	r24, 0x03	; 3
    fc84:	8a d0       	rcall	.+276    	; 0xfd9a <putch>
    fc86:	86 c0       	rjmp	.+268    	; 0xfd94 <main+0x194>
    fc88:	82 34       	cpi	r24, 0x42	; 66
    fc8a:	19 f4       	brne	.+6      	; 0xfc92 <main+0x92>
    fc8c:	84 e1       	ldi	r24, 0x14	; 20
    fc8e:	a6 d0       	rcall	.+332    	; 0xfddc <getNch>
    fc90:	81 c0       	rjmp	.+258    	; 0xfd94 <main+0x194>
    fc92:	85 34       	cpi	r24, 0x45	; 69
    fc94:	19 f4       	brne	.+6      	; 0xfc9c <main+0x9c>
    fc96:	85 e0       	ldi	r24, 0x05	; 5
    fc98:	a1 d0       	rcall	.+322    	; 0xfddc <getNch>
    fc9a:	7c c0       	rjmp	.+248    	; 0xfd94 <main+0x194>
    fc9c:	85 35       	cpi	r24, 0x55	; 85
    fc9e:	49 f4       	brne	.+18     	; 0xfcb2 <main+0xb2>
    fca0:	83 d0       	rcall	.+262    	; 0xfda8 <getch>
    fca2:	88 2e       	mov	r8, r24
    fca4:	81 d0       	rcall	.+258    	; 0xfda8 <getch>
    fca6:	91 2c       	mov	r9, r1
    fca8:	98 2a       	or	r9, r24
    fcaa:	88 0c       	add	r8, r8
    fcac:	99 1c       	adc	r9, r9
    fcae:	8e d0       	rcall	.+284    	; 0xfdcc <verifySpace>
    fcb0:	71 c0       	rjmp	.+226    	; 0xfd94 <main+0x194>
    fcb2:	86 35       	cpi	r24, 0x56	; 86
    fcb4:	29 f4       	brne	.+10     	; 0xfcc0 <main+0xc0>
    fcb6:	84 e0       	ldi	r24, 0x04	; 4
    fcb8:	91 d0       	rcall	.+290    	; 0xfddc <getNch>
    fcba:	80 e0       	ldi	r24, 0x00	; 0
    fcbc:	6e d0       	rcall	.+220    	; 0xfd9a <putch>
    fcbe:	6a c0       	rjmp	.+212    	; 0xfd94 <main+0x194>
    fcc0:	84 36       	cpi	r24, 0x64	; 100
    fcc2:	09 f0       	breq	.+2      	; 0xfcc6 <main+0xc6>
    fcc4:	3d c0       	rjmp	.+122    	; 0xfd40 <main+0x140>
    fcc6:	70 d0       	rcall	.+224    	; 0xfda8 <getch>
    fcc8:	6f d0       	rcall	.+222    	; 0xfda8 <getch>
    fcca:	b8 2e       	mov	r11, r24
    fccc:	6d d0       	rcall	.+218    	; 0xfda8 <getch>
    fcce:	81 14       	cp	r8, r1
    fcd0:	80 ee       	ldi	r24, 0xE0	; 224
    fcd2:	98 06       	cpc	r9, r24
    fcd4:	30 f4       	brcc	.+12     	; 0xfce2 <main+0xe2>
    fcd6:	f4 01       	movw	r30, r8
    fcd8:	f7 be       	out	0x37, r15	; 55
    fcda:	e8 95       	spm
    fcdc:	00 e0       	ldi	r16, 0x00	; 0
    fcde:	11 e0       	ldi	r17, 0x01	; 1
    fce0:	02 c0       	rjmp	.+4      	; 0xfce6 <main+0xe6>
    fce2:	00 e0       	ldi	r16, 0x00	; 0
    fce4:	11 e0       	ldi	r17, 0x01	; 1
    fce6:	60 d0       	rcall	.+192    	; 0xfda8 <getch>
    fce8:	f8 01       	movw	r30, r16
    fcea:	81 93       	st	Z+, r24
    fcec:	8f 01       	movw	r16, r30
    fcee:	be 12       	cpse	r11, r30
    fcf0:	fa cf       	rjmp	.-12     	; 0xfce6 <main+0xe6>
    fcf2:	81 14       	cp	r8, r1
    fcf4:	f0 ee       	ldi	r31, 0xE0	; 224
    fcf6:	9f 06       	cpc	r9, r31
    fcf8:	18 f0       	brcs	.+6      	; 0xfd00 <main+0x100>
    fcfa:	f4 01       	movw	r30, r8
    fcfc:	f7 be       	out	0x37, r15	; 55
    fcfe:	e8 95       	spm
    fd00:	65 d0       	rcall	.+202    	; 0xfdcc <verifySpace>
    fd02:	07 b6       	in	r0, 0x37	; 55
    fd04:	00 fc       	sbrc	r0, 0
    fd06:	fd cf       	rjmp	.-6      	; 0xfd02 <main+0x102>
    fd08:	f4 01       	movw	r30, r8
    fd0a:	a0 e0       	ldi	r26, 0x00	; 0
    fd0c:	b1 e0       	ldi	r27, 0x01	; 1
    fd0e:	8c 91       	ld	r24, X
    fd10:	11 96       	adiw	r26, 0x01	; 1
    fd12:	2c 91       	ld	r18, X
    fd14:	11 97       	sbiw	r26, 0x01	; 1
    fd16:	90 e0       	ldi	r25, 0x00	; 0
    fd18:	92 2b       	or	r25, r18
    fd1a:	12 96       	adiw	r26, 0x02	; 2
    fd1c:	0c 01       	movw	r0, r24
    fd1e:	e7 be       	out	0x37, r14	; 55
    fd20:	e8 95       	spm
    fd22:	11 24       	eor	r1, r1
    fd24:	32 96       	adiw	r30, 0x02	; 2
    fd26:	a1 15       	cp	r26, r1
    fd28:	82 e0       	ldi	r24, 0x02	; 2
    fd2a:	b8 07       	cpc	r27, r24
    fd2c:	81 f7       	brne	.-32     	; 0xfd0e <main+0x10e>
    fd2e:	f4 01       	movw	r30, r8
    fd30:	d7 be       	out	0x37, r13	; 55
    fd32:	e8 95       	spm
    fd34:	07 b6       	in	r0, 0x37	; 55
    fd36:	00 fc       	sbrc	r0, 0
    fd38:	fd cf       	rjmp	.-6      	; 0xfd34 <main+0x134>
    fd3a:	c7 be       	out	0x37, r12	; 55
    fd3c:	e8 95       	spm
    fd3e:	2a c0       	rjmp	.+84     	; 0xfd94 <main+0x194>
    fd40:	84 37       	cpi	r24, 0x74	; 116
    fd42:	b9 f4       	brne	.+46     	; 0xfd72 <main+0x172>
    fd44:	31 d0       	rcall	.+98     	; 0xfda8 <getch>
    fd46:	30 d0       	rcall	.+96     	; 0xfda8 <getch>
    fd48:	b8 2e       	mov	r11, r24
    fd4a:	2e d0       	rcall	.+92     	; 0xfda8 <getch>
    fd4c:	3f d0       	rcall	.+126    	; 0xfdcc <verifySpace>
    fd4e:	f4 01       	movw	r30, r8
    fd50:	a8 2c       	mov	r10, r8
    fd52:	ab 0c       	add	r10, r11
    fd54:	8f 01       	movw	r16, r30
    fd56:	0f 5f       	subi	r16, 0xFF	; 255
    fd58:	1f 4f       	sbci	r17, 0xFF	; 255
    fd5a:	84 91       	lpm	r24, Z
    fd5c:	1e d0       	rcall	.+60     	; 0xfd9a <putch>
    fd5e:	f8 01       	movw	r30, r16
    fd60:	a0 12       	cpse	r10, r16
    fd62:	f8 cf       	rjmp	.-16     	; 0xfd54 <main+0x154>
    fd64:	ff ef       	ldi	r31, 0xFF	; 255
    fd66:	8f 1a       	sub	r8, r31
    fd68:	9f 0a       	sbc	r9, r31
    fd6a:	ba 94       	dec	r11
    fd6c:	8b 0c       	add	r8, r11
    fd6e:	91 1c       	adc	r9, r1
    fd70:	11 c0       	rjmp	.+34     	; 0xfd94 <main+0x194>
    fd72:	85 37       	cpi	r24, 0x75	; 117
    fd74:	41 f4       	brne	.+16     	; 0xfd86 <main+0x186>
    fd76:	2a d0       	rcall	.+84     	; 0xfdcc <verifySpace>
    fd78:	8e e1       	ldi	r24, 0x1E	; 30
    fd7a:	0f d0       	rcall	.+30     	; 0xfd9a <putch>
    fd7c:	86 e9       	ldi	r24, 0x96	; 150
    fd7e:	0d d0       	rcall	.+26     	; 0xfd9a <putch>
    fd80:	8a e0       	ldi	r24, 0x0A	; 10
    fd82:	0b d0       	rcall	.+22     	; 0xfd9a <putch>
    fd84:	07 c0       	rjmp	.+14     	; 0xfd94 <main+0x194>
    fd86:	81 35       	cpi	r24, 0x51	; 81
    fd88:	21 f4       	brne	.+8      	; 0xfd92 <main+0x192>
    fd8a:	88 e0       	ldi	r24, 0x08	; 8
    fd8c:	19 d0       	rcall	.+50     	; 0xfdc0 <watchdogConfig>
    fd8e:	1e d0       	rcall	.+60     	; 0xfdcc <verifySpace>
    fd90:	01 c0       	rjmp	.+2      	; 0xfd94 <main+0x194>
    fd92:	1c d0       	rcall	.+56     	; 0xfdcc <verifySpace>
    fd94:	80 e1       	ldi	r24, 0x10	; 16
    fd96:	01 d0       	rcall	.+2      	; 0xfd9a <putch>
    fd98:	63 cf       	rjmp	.-314    	; 0xfc60 <main+0x60>

0000fd9a <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    fd9a:	90 91 c0 00 	lds	r25, 0x00C0
    fd9e:	95 ff       	sbrs	r25, 5
    fda0:	fc cf       	rjmp	.-8      	; 0xfd9a <putch>
  UDR0 = ch;
    fda2:	80 93 c6 00 	sts	0x00C6, r24
    fda6:	08 95       	ret

0000fda8 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    fda8:	80 91 c0 00 	lds	r24, 0x00C0
    fdac:	87 ff       	sbrs	r24, 7
    fdae:	fc cf       	rjmp	.-8      	; 0xfda8 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    fdb0:	80 91 c0 00 	lds	r24, 0x00C0
    fdb4:	84 fd       	sbrc	r24, 4
    fdb6:	01 c0       	rjmp	.+2      	; 0xfdba <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fdb8:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    fdba:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fdbe:	08 95       	ret

0000fdc0 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fdc0:	e0 e6       	ldi	r30, 0x60	; 96
    fdc2:	f0 e0       	ldi	r31, 0x00	; 0
    fdc4:	98 e1       	ldi	r25, 0x18	; 24
    fdc6:	90 83       	st	Z, r25
  WDTCSR = x;
    fdc8:	80 83       	st	Z, r24
    fdca:	08 95       	ret

0000fdcc <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fdcc:	ed df       	rcall	.-38     	; 0xfda8 <getch>
    fdce:	80 32       	cpi	r24, 0x20	; 32
    fdd0:	19 f0       	breq	.+6      	; 0xfdd8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fdd2:	88 e0       	ldi	r24, 0x08	; 8
    fdd4:	f5 df       	rcall	.-22     	; 0xfdc0 <watchdogConfig>
    fdd6:	ff cf       	rjmp	.-2      	; 0xfdd6 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fdd8:	84 e1       	ldi	r24, 0x14	; 20
    fdda:	df cf       	rjmp	.-66     	; 0xfd9a <putch>

0000fddc <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fddc:	cf 93       	push	r28
    fdde:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    fde0:	e3 df       	rcall	.-58     	; 0xfda8 <getch>
    fde2:	c1 50       	subi	r28, 0x01	; 1
    fde4:	e9 f7       	brne	.-6      	; 0xfde0 <getNch+0x4>
  verifySpace();
}
    fde6:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    fde8:	f1 cf       	rjmp	.-30     	; 0xfdcc <verifySpace>

0000fdea <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    fdea:	80 e0       	ldi	r24, 0x00	; 0
    fdec:	e9 df       	rcall	.-46     	; 0xfdc0 <watchdogConfig>
  __asm__ __volatile__ (
    fdee:	ee 27       	eor	r30, r30
    fdf0:	ff 27       	eor	r31, r31
    fdf2:	09 94       	ijmp
