                        ; --------------------------------------
                        ; zasm: assemble "rom_mon_F000.asm"
                        ; date: 2025-10-13 14:05:54
                        ; --------------------------------------


                        ; macros
                        clrcf:	macro		; clear carry flag
                        		and 	a
                        		endm
                        ;
                        clra: 	macro
                        		xor 	a
                        		endm
                        ;
                        ; I/O port
                        ;
0000:                   CONSTA 	equ 	0
0001:                   CONIO 	equ 	1
                        ;CONOUT equ 	2
0080:                   CLKMODE	equ 	128
0081:                   LED7SEG	equ 	129
                        ;
                        ;
                        ; a  ... workspace reg.
                        ; b  ... workspace reg. dnjz counter
                        ; c  ... command
                        ; de ... address
                        ; ix ...  mon_curr_addr, curr_addr + 2 == end_addr
                        ;
                        
                        ; rom subroutines;
                        ;clk_spd_change     = $F11D
                        ;dump               = $F09F
                        ;getln              = $F000 
                        ;hex2nib            = $F0E8 
                        ;hexstr_de          = $F106 
                        ;print_byte         = $F05B 
                        ;print_endl         = $F068 
                        ;print_err_msg      = $F079 
                        ;print_nibble       = $F04C 
                        ;print_str_hl       = $F071 
                        ;
                        
                        ; work space
EFA0:                   addr	equ		0EFA0H
EFA2:                   addr2	equ 	addr+2
EFB0:                   lbuf	equ 	0EFB0H
003F:                   BUFSIZE equ 	63
                        ;
                        
F000:                           org     0F000h
F000:                   mon:            ;entry point
F000: 110000   [10]     		ld 		de, 0
F003: ED53A0EF [30]     		ld 		(addr), de
F007: ED53A2EF [50]     		ld 		(addr2), de
F00B: ED53B0EF [70]     		ld 		(lbuf), de 
F00F:                   read_line:
F00F: 21B0EF   [10]     		ld 		hl, lbuf 	; line buffer
F012: 0E3F     [17]     		ld 		c, BUFSIZE	; line size (except null terminal)
F014: CDCDF0   [34]     		call	getln
F017: 21B0EF   [44]     		ld 		hl, lbuf
F01A: 7E       [51]     		ld 		a, (hl)
                        ; no arity commands
F01B: FE00     [58]     		cp 		$0 		; line is empty
F01D: 2844     [65|70]  		jr 		z, default_dump
                        		;
F01F: FE48     [72]     		cp 		'H' 	; begins with H
F021: CAC4F0   [82|82]  		jp 		z, mon_halt
                        		;
F024: FE2E     [89]     		cp 		'.'		; begins with .
F026: 2827     [96|101] 		jr 		z, specify_end
F028: FE3A     [103]    		cp 		':'		; begins with :
F02A: 2866     [110|115]		jr 		z, write_mode
                        		;
                        ; specify start address and function
F02C: 0E04     [117]    		ld 		c, 4
F02E: CDE3F1   [134]    		call 	hexstr_de
F031: ED53A0EF [154]    		ld 		(addr), de
                        		;
F035: 7E       [161]    		ld 		a, (hl)
F036: FE00     [168]    		cp 		$0
F038: 2829     [175|180]		jr 		z, default_dump
F03A: FE2E     [182]    		cp		'.'
F03C: 2811     [189|194]		jr 		z, specify_end
F03E: FE3A     [196]    		cp		':'
F040: 2850     [203|208]		jr 		z, write_mode
F042: FE52     [210]    		cp		'R'
F044: 2873     [217|222]		jr 		z, run_mode
F046: FE53     [224]    		cp		'S'
F048: 2873     [231|236]		jr 		z, clk_mode
F04A: CD56F1   [248]    		call 	print_err_msg
F04D: 18B1     [260]    		jr 		mon		; addr and addr2 are possibly corrupted
                        		;
F04F:                   specify_end:
F04F: 23       [ 6]     		inc 	hl 		; next to '.'
F050: 0E04     [13]     		ld 		c, 4
F052: CDE3F1   [30]     		call 	hexstr_de
F055: ED53A2EF [50]     		ld 		(addr2), de
F059: 7E       [57]     		ld 		a, (hl)
F05A: FE00     [64]     		cp 		0
F05C: 2805     [71|76]  		jr 		z, default_dump
F05E: CD56F1   [88]     		call 	print_err_msg
F061: 189D     [100]    		jr 		mon		; addr and addr2 are possibly corrupted
                        		;
F063:                   default_dump:
F063: 2AA0EF   [16]     		ld 		hl, (addr)
F066: ED5BA2EF [36]     		ld 		de, (addr2)
F06A: 7C       [40]     		ld 		a, h
F06B: BA       [44]     		cp 		d 
F06C: 2002     [51|56]  		jr 		nz, $+4 
F06E: 7D       [55]     		ld 		a, l 
F06F: BB       [59]     		cp 		e 
F070: 3809     [66|71]  		jr 		c, do_dump  ; start < end
F072: 2807     [73|78]  		jr 		z, do_dump  ; start == end
F074: 111000   [83]     		ld 		de, $10
F077: 19       [94]     		add 	hl, de
F078: 22A2EF   [110]    		ld 		(addr2), hl
                        		;
F07B:                   do_dump:
F07B: 2AA0EF   [16]     		ld 		hl, (addr)
F07E: ED5BA2EF [36]     		ld 		de, (addr2)
F082: CD7CF1   [53]     		call 	dump
F085: 22A0EF   [69]     		ld 		(addr), hl
F088: 110000   [79]     		ld 		de, 0
F08B: ED53A2EF [99]     		ld 		(addr2), de
F08F: C30FF0   [109]    		jp 		read_line
                        ;
F092:                   write_mode:
F092: 23       [ 6]     		inc 	hl 		; next to ':'
F093: 7E       [13]     		ld 		a, (hl)
F094: FE20     [20]     		cp 		' '
F096: 28FA     [27|32]  		jr 		z, write_mode
                        		;
F098: 0E02     [34]     		ld 		c, 2
F09A: CDE3F1   [51]     		call 	hexstr_de
F09D: 79       [55]     		ld 		a, c 
F09E: FE02     [62]     		cp 		a, 2
F0A0: 2814     [69|74]  		jr 		z, write_mode.exit	; no arg or illegal char
F0A2: DD2AA0EF [89]     		ld 		ix, (addr)
F0A6: DD7300   [108]    		ld 		(ix), e
F0A9: DD23     [118]    		inc 	ix
F0AB: DD22A0EF [138]    		ld 		(addr), ix
F0AF: 7E       [145]    		ld 		a, (hl)
F0B0: FE00     [152]    		cp 		0
F0B2: 2802     [159|164]		jr 		z, write_mode.exit
F0B4: 18DC     [171]    		jr 		write_mode
F0B6:                   write_mode.exit
F0B6: C30FF0   [10]     		jp 		read_line
                        ;
F0B9:                   run_mode:
F0B9: 2AA0EF   [16]     		ld 		hl, (addr)
F0BC: E9       [20]     		jp 		(hl)
                        ;;
                        ;  clockspeed change by output number to port 128
F0BD:                   clk_mode:
F0BD: 7B       [ 4]     		ld 		a, e
F0BE: CDFAF1   [21]     		call 	clk_spd_change
F0C1: C30FF0   [31]     		jp 		read_line
                        ;
F0C4:                   mon_halt:
F0C4: 76       [ 4]     		halt
                        
                        
                        ; subroutines
                        ; getchar
F0C5:                   getchar:
F0C5: DB00     [11]     		in 		a, (CONSTA)
F0C7: A7       [15]     		and 	a
F0C8: 28FB     [22|27]  		jr 		z, getchar
F0CA: DB01     [33]     		in 		a, (CONIO)
F0CC: C9       [43]     		ret
                        
                        ; getlin
                        ; read up to c bytes into buffer pointed by hl, end with 0
                        ; hl ... line buffer pointer
                        ; c  .... buffer limit length
F0CD:                   getln:
F0CD: 3600     [10]     		ld 		(hl), 0
F0CF: 0600     [17]     		ld 		b, 0		; char count
F0D1: CD45F1   [34]     		call 	print_endl
F0D4: 3E2A     [41]     		ld 		a, '*'
F0D6: D301     [52]     		out 	(CONIO), a
                                ;
F0D8:                   getln_wait:
F0D8: CDC5F0   [17]     		call 	getchar
                        		;in 		a, (CONSTA)
                        		;and 	a
                        		;jr 		z, getln_wait
                        		;in 		a, (CONIO)
                        		; 
F0DB: FE08     [24]     		cp 		$08 	;backspace
F0DD: 2816     [31|36]  		jr 		z, getln_bkspc
F0DF: FE7F     [38]     		cp 		$7f		; del
F0E1: 2812     [45|50]  		jr 		z, getln_bkspc
F0E3: FE1B     [52]     		cp 		$1b
F0E5: 2824     [59|64]  		jr 		z, getln_escseq
F0E7: FE0A     [66]     		cp 		$0a
F0E9: 283D     [73|78]  		jr 		z, getln_end
F0EB: FE0D     [80]     		cp 		$0d
F0ED: 2839     [87|92]  		jr 		z, getln_end
                        ; other ctrl codes
F0EF: FE20     [94]     		cp 		$20
F0F1: 3028     [101|106]		jr 		nc, getln_echo_proceed
F0F3: 18E3     [113]    		jr 		getln_wait
                        
F0F5:                   getln_bkspc:
F0F5: 78       [ 4]     		ld 		a, b
F0F6: A7       [ 8]     		and 	a
F0F7: 28DF     [15|20]  		jr 		z, getln_wait
F0F9: 3E08     [22]     		ld 		a, $08
F0FB: D301     [33]     		out 	(CONIO), a
F0FD: 3E20     [40]     		ld 		a, ' '
F0FF: D301     [51]     		out 	(CONIO), a
F101: 3E08     [58]     		ld 		a, $08
F103: D301     [69]     		out 	(CONIO), a
F105: 2B       [75]     		dec 	hl
F106: 3600     [85]     		ld 		(hl), $0
F108: 05       [89]     		dec 	b
F109: 18CD     [101]    		jr 		getln_wait
                        
F10B:                   getln_escseq:
F10B: CDC5F0   [17]     		call  	getchar
F10E: FE5B     [24]     		cp 		'['
F110: 20C6     [31|36]  		jr 		nz, getln_wait
F112: CDC5F0   [48]     		call 	getchar
F115: FE44     [55]     		cp 		'D'
F117: 28DC     [62|67]  		jr 		z, getln_bkspc
F119: 18BD     [74]     		jr 		getln_wait
                        
F11B:                   getln_echo_proceed:
F11B: D301     [11]     		out 	(CONIO), a 		; echo back
                        		;
F11D: 77       [18]     		ld 		(hl),a		; *ptr++ = a
F11E: 23       [24]     		inc 	hl
F11F: 3600     [34]     		ld 		(hl), $0	; *ptr = NULL
F121: 04       [38]     		inc 	b
F122: 78       [42]     		ld 		a, b
F123: B9       [46]     		cp 		c
F124: 3002     [53|58]  		jr 		nc, getln_end  ; force terminate line
F126: 18B0     [65]     		jr 		getln_wait
                        
F128:                   getln_end:	; parse lbuf
F128: C9       [10]     		ret
                        
                        ;
                        ; print a nibble in A
F129:                   print_nibble:
F129: E60F     [ 7]     		and 	$0f
F12B: FE0A     [14]     		cp 		$a
F12D: C630     [21]     		add 	'0'
F12F: FE3A     [28]     		cp 		':'
F131: 3802     [35|40]  		jr 		c, print_nibble_out
F133: C607     [42]     		add 	7
F135:                   print_nibble_out:
F135: D301     [11]     		out 	(CONIO), a
F137: C9       [21]     		ret
                        
                        ; print a byte in A
F138:                   print_byte:
F138: F5       [11]     		push 	af
F139: 07       [15]     		rlca
F13A: 07       [19]     		rlca
F13B: 07       [23]     		rlca
F13C: 07       [27]     		rlca
F13D: CD29F1   [44]     		call 	print_nibble
F140: F1       [54]     		pop 	af
F141: CD29F1   [71]     		call 	print_nibble
F144: C9       [81]     		ret
                        
F145:                   print_endl:
F145: 3E0A     [ 7]     		ld 		a, $0a
F147: D301     [18]     		out 	(CONIO), A
F149: 3E0D     [25]     		ld 		a, $0d
F14B: D301     [36]     		out 	(CONIO), A
F14D: C9       [46]     		ret
                        ;
F14E:                   print_str_hl:
F14E: 7E       [ 7]     		ld 		a,(hl)
F14F: A7       [11]     		and 	A
F150: C8       [16|22]  		ret 	z
F151: D301     [27]     		out 	(CONIO), a
F153: 23       [33]     		inc 	hl
F154: 18F8     [45]     		jr 		print_str_hl
                        ;
                        ;
F156:                   print_err_msg:
F156: E5       [11]     		push 	hl
F157: F5       [22]     		push 	af
F158: CD45F1   [39]     		call 	print_endl
F15B: 2172F1   [49]     		ld 		hl, str_err
F15E: CD4EF1   [66]     		call 	print_str_hl
F161: F1       [76]     		pop 	af
F162: CD38F1   [93]     		call 	print_byte
F165: CD45F1   [110]    		call 	print_endl
F168: E1       [120]    		pop 	hl
F169: 7C       [124]    		ld 		a, h
F16A: CD38F1   [141]    		call 	print_byte
F16D: 7D       [145]    		ld 		a, l
F16E: CD38F1   [162]    		call 	print_byte
F171: C9       [172]    		ret
                        		;
F172:                   str_err:
F172: 0A0D6572          		db 	$0a, $0d, "error"
F176: 726F72            
F179:                   str_endl:
F179: 0A0D00            		db $0a, $0d, 0
                        ;
                        
                        ; dump : dump memory from addr to addr+2 (value)
                        ; hl ... start address (will be trucated)
                        ; de ... end address
                        ;
                        ; bc ... the original start address
                        
F17C:                   dump:
F17C: 44       [ 4]     	ld 		b, h
F17D: 4D       [ 8]     	ld 		c, l
F17E: 3EF0     [15]     	ld 		a, $F0
F180: A5       [19]     	and 	l
F181: 6F       [23]     	ld 		l, a
F182:                   dump.print_header:
F182: CD45F1   [17]     	call 	print_endl
F185: 78       [21]     	ld 		a, b
F186: CD38F1   [38]     	call 	print_byte
F189: 79       [42]     	ld 		a, c
F18A: CD38F1   [59]     	call 	print_byte
F18D: 3E20     [66]     	ld 		a, ' '
F18F: D301     [77]     	out 	(CONIO), a
F191: 3E3A     [84]     	ld 		a, ':'
F193: D301     [95]     	out 	(CONIO), a
F195: 3E20     [102]    	ld 		a, ' '
F197: D301     [113]    	out 	(CONIO), a
                            ;
F199:                   dump.bytes:
                        	;cp 	bc, hl
F199: 78       [ 4]     	ld 		a, b
F19A: BC       [ 8]     	cp 		h
F19B: 2002     [15|20]  	jr 		nz, $+4
F19D: 79       [19]     	ld 		a, c
F19E: BD       [23]     	cp 		l
                        	;
F19F: 380A     [30|35]  	jr 		c, dump.print_byte
F1A1: 2808     [37|42]  	jr 		z, dump.print_byte
                        ; print two-spaces
F1A3: 3E20     [44]     	ld 		a, ' '
F1A5: D301     [55]     	out 	(CONIO), a
F1A7: D301     [66]     	out 	(CONIO), a
F1A9: 1804     [78]     	jr 		dump.print_spc
F1AB:                   dump.print_byte
F1AB: 7E       [ 7]     	ld 		a, (hl)
F1AC: CD38F1   [24]     	call 	print_byte
F1AF:                   dump.print_spc:
F1AF: 3E20     [ 7]     	ld 		a, ' '
F1B1: D301     [18]     	out 	(CONIO), a
F1B3: 23       [24]     	inc 	hl
                        	; cp 	de, hl
F1B4: 7A       [28]     	ld 		a, d
F1B5: BC       [32]     	cp 		h
F1B6: 2002     [39|44]  	jr 		nz, $+4; dump.cp_de_hl_end
F1B8: 7B       [43]     	ld 		a, e
F1B9: BD       [47]     	cp 		l
                        	; cp 	de, hl end
F1BA: C8       [52|58]  	ret 	z ; de == hl, then exit dump
F1BB: D8       [57|63]  	ret 	c ; de < hl, then exit dump
F1BC: 7D       [61]     	ld 		a, l 	; test whether the least 4 bits of address is zero
F1BD: E60F     [68]     	and 	$0f
F1BF: 20D8     [75|80]  	jr 		nz, dump.bytes
F1C1: 44       [79]     	ld 		b, h 
F1C2: 4D       [83]     	ld 		c, l
F1C3: 18BD     [95]     	jr 		dump.print_header  ; if so print address header
                            ;
                        
                        ; convert one char expressing a hexadecimal digit 
                        ; in A reg. to nibble in A
                        ; set carry flag if got a wrong char
                        ;
F1C5:                   hex2nib:
F1C5: FE30     [ 7]     		cp 		'0'
F1C7: D8       [12|18]  		ret 	c		; A < '0'
F1C8: FE3A     [19]     		cp 		'9' + 1
F1CA: 3003     [26|31]  		jr 		nc, hex2nib.alpha
F1CC: D630     [33]     		sub 	'0' 	; A was digit, results carry reset
F1CE: C9       [43]     		ret
F1CF:                   hex2nib.alpha:
F1CF: FE61     [ 7]     		cp 		'a'
F1D1: 3806     [14|19]  		jr 		c, hex2nib.upper
F1D3: FE67     [21]     		cp 		'f'+1
F1D5: 3F       [25]     		ccf		; set carry if A >= 'f'+1
F1D6: D8       [30|36]  		ret 	c
F1D7: E6DF     [37]     		and 	$df		; a - f to upper char
F1D9:                   hex2nib.upper:
F1D9: FE41     [ 7]     		cp 		'A'
F1DB: D8       [12|18]  		ret 	c
F1DC: FE47     [19]     		cp      'F' + 1
F1DE: 3F       [23]     		ccf
F1DF: D8       [28|34]  		ret 	c      ; error if it is larger than 'F'
F1E0: D637     [35]     		sub 	'A'-10
F1E2: C9       [45]     		ret
                        
                        ; read hexadecimal string char upto 2 or 4 (set in C) 
                        ; bytes from (HL) and return int val in DE
                        ; if non hexdec char is encountered at (HL), returns with current de value without inc hl.
                        ; if C upper-limit bytes has been read, returns with current de value with increment hl.
                        ; A reg. hold the last char read from (HL).
                        ;
F1E3:                   hexstr_de:
F1E3: 110000   [10]     		ld      de, 0000h
F1E6:                   hexstr_de.loop:
F1E6: 7E       [ 7]     		ld      a, (hl)
F1E7: CDC5F1   [24]     		call 	hex2nib
F1EA: D8       [29|35]  		ret 	c 			; encountered non-hexdec char.
F1EB:                   hexstr_de.hex2nib_succ:
F1EB: 0604     [ 7]     		ld 		b, 4
F1ED:                   hexstr_de.rl4:
F1ED: CB13     [ 8]     		rl      e		 ;rotate left entire de
F1EF: CB12     [16]     		rl      d
F1F1: 10FA     [24|29]  		djnz    hexstr_de.rl4
F1F3: 83       [28]     		add 	e
F1F4: 5F       [32]     		ld 		e, a
F1F5: 23       [38]     		inc 	hl 		; 
F1F6: 0D       [42]     		dec 	c
F1F7: 20ED     [49|54]  		jr      nz, hexstr_de.loop
F1F9: C9       [59]     		ret 			; return after c bytes read
                        
                        ;
F1FA:                   clk_spd_change:
F1FA: E607     [ 7]     		and 	$07
F1FC: D380     [18]     		out		(CLKMODE), a
F1FE: C9       [28]     		ret
                        
                        ; arithmetic routines
                        ; dvi_hl_c stack in out wrapper
                        ; [ret addr] [dividiend] [divisor:low] 
                        ; --> [ret addr] [quotient] [reminder:low]
F1FF:                   div16_8:
F1FF: DD210200 [14]         ld      ix, 02
F203: DD39     [29]         add     ix, sp
F205: DD6E00   [48]         ld      hl, (ix)
F208: DD6601   [67]     
F20B: DD4E02   [86]         ld      c, (ix+2)
F20E: CD1BF2   [103]        call    div_hl_c
F211: DD7500   [122]        ld      (ix), hl
F214: DD7401   [141]    
F217: DD7702   [160]        ld      (ix+2), a
F21A: C9       [170]        ret
                        
                        ; divides hl by c and places the quotient in hl 
                        ; and the remainder in a
F21B:                   div_hl_c:
F21B: AF       [ 4]        xor	a
F21C: 0610     [11]        ld	b, 16
                        
F21E:                   div_hl_c_loop:
F21E: 29       [11]        add	hl, hl
F21F: 17       [15]        rla
F220: 3803     [22|27]     jr	c, $+5
F222: B9       [26]        cp	c
F223: 3802     [33|38]     jr	c, $+4
                        
F225: 91       [37]        sub	c
F226: 2C       [41]        inc	l
                           
F227: 10F5     [49|54]     djnz	div_hl_c_loop
                           
F229: C9       [59]        ret
                        
                        
                        ; print the decimal integer in HL 
F22A:                   print_hl_dec:
F22A: AF       [ 4]     	xor 	a
F22B: F5       [15]     	push 	af 		; terminal null char
F22C: 0E0A     [22]     	ld 		c, 10 	; radix = 10
                        
F22E:                   print_hl_dec_loop0:
F22E: CD1BF2   [17]     	call 	div_hl_c 	; a = hl % 10, hl = hl / 10
F231: C630     [24]     	add 	a, $30		; to ascii code between '0' and '9'
F233: F5       [35]     	push 	af
F234: 7C       [39]     	ld 		a, h 		; check whether hl is empty
F235: B5       [43]     	or 		l
F236: 2802     [50|55]  	jr 		z, print_hl_dec_output		; if z then conversion finished
F238: 18F4     [62]     	jr 		print_hl_dec_loop0
                        
F23A:                   print_hl_dec_output:
F23A: F1       [10]     	pop 	af
F23B: A7       [14]     	and 	a
F23C: C8       [19|25]  	ret 	z
F23D: D302     [30]     	out 	(2), a
F23F: 18F9     [42]     	jr 		print_hl_dec_output


; +++ segments +++

#CODE          = $F000 = 61440,  size = $0241 =   577

; +++ global symbols +++

BUFSIZE            = $003F =    63          rom_mon_F000.asm:43
CLKMODE            = $0080 =   128          rom_mon_F000.asm:15
CONIO              = $0001 =     1          rom_mon_F000.asm:13
CONSTA             = $0000 =     0          rom_mon_F000.asm:12
LED7SEG            = $0081 =   129          rom_mon_F000.asm:16 (unused)
_end               = $F241 = 62017          rom_mon_F000.asm:46 (unused)
_size              = $0241 =   577          rom_mon_F000.asm:46 (unused)
addr               = $EFA0 = 61344          rom_mon_F000.asm:40
addr2              = $EFA2 = 61346          rom_mon_F000.asm:41
clk_mode           = $F0BD = 61629          rom_mon_F000.asm:150
clk_spd_change     = $F1FA = 61946          rom_mon_F000.asm:420
default_dump       = $F063 = 61539          rom_mon_F000.asm:100
div16_8            = $F1FF = 61951          rom_mon_F000.asm:429 (unused)
div_hl_c           = $F21B = 61979          rom_mon_F000.asm:441
div_hl_c_loop      = $F21E = 61982          rom_mon_F000.asm:445
do_dump            = $F07B = 61563          rom_mon_F000.asm:114
dump               = $F17C = 61820          rom_mon_F000.asm:309
dump.bytes         = $F199 = 61849          rom_mon_F000.asm:328
dump.print_byte    = $F1AB = 61867          rom_mon_F000.asm:343
dump.print_header  = $F182 = 61826          rom_mon_F000.asm:315
dump.print_spc     = $F1AF = 61871          rom_mon_F000.asm:346
getchar            = $F0C5 = 61637          rom_mon_F000.asm:161
getln              = $F0CD = 61645          rom_mon_F000.asm:172
getln_bkspc        = $F0F5 = 61685          rom_mon_F000.asm:201
getln_echo_proceed = $F11B = 61723          rom_mon_F000.asm:225
getln_end          = $F128 = 61736          rom_mon_F000.asm:237
getln_escseq       = $F10B = 61707          rom_mon_F000.asm:216
getln_wait         = $F0D8 = 61656          rom_mon_F000.asm:179
hex2nib            = $F1C5 = 61893          rom_mon_F000.asm:371
hex2nib.alpha      = $F1CF = 61903          rom_mon_F000.asm:378
hex2nib.upper      = $F1D9 = 61913          rom_mon_F000.asm:385
hexstr_de          = $F1E3 = 61923          rom_mon_F000.asm:400
hexstr_de.hex2nib_succ = $F1EB = 61931          rom_mon_F000.asm:406 (unused)
hexstr_de.loop     = $F1E6 = 61926          rom_mon_F000.asm:402
hexstr_de.rl4      = $F1ED = 61933          rom_mon_F000.asm:408
lbuf               = $EFB0 = 61360          rom_mon_F000.asm:42
mon                = $F000 = 61440          rom_mon_F000.asm:47
mon_halt           = $F0C4 = 61636          rom_mon_F000.asm:155
print_byte         = $F138 = 61752          rom_mon_F000.asm:254
print_endl         = $F145 = 61765          rom_mon_F000.asm:265
print_err_msg      = $F156 = 61782          rom_mon_F000.asm:281
print_hl_dec       = $F22A = 61994          rom_mon_F000.asm:461 (unused)
print_hl_dec_loop0 = $F22E = 61998          rom_mon_F000.asm:466
print_hl_dec_output = $F23A = 62010          rom_mon_F000.asm:475
print_nibble       = $F129 = 61737          rom_mon_F000.asm:242
print_nibble_out   = $F135 = 61749          rom_mon_F000.asm:249
print_str_hl       = $F14E = 61774          rom_mon_F000.asm:272
read_line          = $F00F = 61455          rom_mon_F000.asm:52
run_mode           = $F0B9 = 61625          rom_mon_F000.asm:145
specify_end        = $F04F = 61519          rom_mon_F000.asm:89
str_endl           = $F179 = 61817          rom_mon_F000.asm:299 (unused)
str_err            = $F172 = 61810          rom_mon_F000.asm:297
write_mode         = $F092 = 61586          rom_mon_F000.asm:123
write_mode.exit    = $F0B6 = 61622          rom_mon_F000.asm:142


total time: 0.0015 sec.
no errors
