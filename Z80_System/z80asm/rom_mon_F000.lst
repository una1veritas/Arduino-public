                        ; --------------------------------------
                        ; zasm: assemble "rom_mon_F000.asm"
                        ; date: 2025-10-12 11:44:27
                        ; --------------------------------------


                        ; macros
                        clrcf:	macro		; clear carry flag
                        		and 	a
                        		endm
                        ;
                        clra: 	macro
                        		xor 	a
                        		endm
                        ;
                        ; I/O port
                        ;
0000:                   CONSTA 	equ 	0
0001:                   CONIO 	equ 	1
                        ;CONOUT equ 	2
0080:                   CLKMODE	equ 	128
0081:                   BUSDISP	equ 	129
                        ;
                        ;
                        ; a  ... workspace reg.
                        ; b  ... workspace reg. dnjz counter
                        ; c  ... command
                        ; de ... address
                        ; ix ...  mon_curr_addr, curr_addr + 2 == end_addr
                        ;
                        
                        ; rom subroutines;
                        ;clk_spd_change     = $F11D
                        ;dump               = $F09F
                        ;getln              = $F000 
                        ;hex2nib            = $F0E8 
                        ;hexstr_de          = $F106 
                        ;print_byte         = $F05B 
                        ;print_endl         = $F068 
                        ;print_err_msg      = $F079 
                        ;print_nibble       = $F04C 
                        ;print_str_hl       = $F071 
                        ;
                        
                        ; work space
EFA0:                   addr	equ		0EFA0H
EFA2:                   addr2	equ 	addr+2
EFA4:                   escqbuf	equ		addr+4
EFB0:                   lbuf	equ 	0EFB0H
003F:                   BUFSIZE equ 	63
                        
                        ;
                        
F000:                           org     0F000h
F000:                   mon:            ;entry point
F000: 110000   [10]     		ld 		de, 0
F003: ED53A0EF [30]     		ld 		(addr), de
F007: ED53A2EF [50]     		ld 		(addr2), de
F00B: ED53B0EF [70]     		ld 		(lbuf), de 
F00F:                   read_line:
F00F: 21B0EF   [10]     		ld 		hl, lbuf 	; line buffer
F012: 0E3F     [17]     		ld 		c, BUFSIZE	; line size (except null terminal)
F014: CDCDF0   [34]     		call	getln
F017: 21B0EF   [44]     		ld 		hl, lbuf
F01A: 7E       [51]     		ld 		a, (hl)
                        ; no arity commands
F01B: FE00     [58]     		cp 		$0 		; line is empty
F01D: 2844     [65|70]  		jr 		z, default_dump
                        		;
F01F: FE48     [72]     		cp 		'H' 	; begins with H
F021: CAC4F0   [82|82]  		jp 		z, mon_halt
                        		;
F024: FE2E     [89]     		cp 		'.'		; begins with .
F026: 2827     [96|101] 		jr 		z, specify_end
F028: FE3A     [103]    		cp 		':'		; begins with :
F02A: 2866     [110|115]		jr 		z, write_mode
                        		;
                        ; specify start address and function
F02C: 0E04     [117]    		ld 		c, 4
F02E: CDFAF1   [134]    		call 	hexstr_de
F031: ED53A0EF [154]    		ld 		(addr), de
                        		;
F035: 7E       [161]    		ld 		a, (hl)
F036: FE00     [168]    		cp 		$0
F038: 2829     [175|180]		jr 		z, default_dump
F03A: FE2E     [182]    		cp		'.'
F03C: 2811     [189|194]		jr 		z, specify_end
F03E: FE3A     [196]    		cp		':'
F040: 2850     [203|208]		jr 		z, write_mode
F042: FE52     [210]    		cp		'R'
F044: 2873     [217|222]		jr 		z, run_mode
F046: FE53     [224]    		cp		'S'
F048: 2873     [231|236]		jr 		z, clk_mode
F04A: CD6DF1   [248]    		call 	print_err_msg
F04D: 18B1     [260]    		jr 		mon		; addr and addr2 are possibly corrupted
                        		;
F04F:                   specify_end:
F04F: 23       [ 6]     		inc 	hl 		; next to '.'
F050: 0E04     [13]     		ld 		c, 4
F052: CDFAF1   [30]     		call 	hexstr_de
F055: ED53A2EF [50]     		ld 		(addr2), de
F059: 7E       [57]     		ld 		a, (hl)
F05A: FE00     [64]     		cp 		0
F05C: 2805     [71|76]  		jr 		z, default_dump
F05E: CD6DF1   [88]     		call 	print_err_msg
F061: 189D     [100]    		jr 		mon		; addr and addr2 are possibly corrupted
                        		;
F063:                   default_dump:
F063: 2AA0EF   [16]     		ld 		hl, (addr)
F066: ED5BA2EF [36]     		ld 		de, (addr2)
F06A: 7C       [40]     		ld 		a, h
F06B: BA       [44]     		cp 		d 
F06C: 2002     [51|56]  		jr 		nz, $+4 
F06E: 7D       [55]     		ld 		a, l 
F06F: BB       [59]     		cp 		e 
F070: 3809     [66|71]  		jr 		c, do_dump  ; start < end
F072: 2807     [73|78]  		jr 		z, do_dump  ; start == end
F074: 111000   [83]     		ld 		de, $10
F077: 19       [94]     		add 	hl, de
F078: 22A2EF   [110]    		ld 		(addr2), hl
                        		;
F07B:                   do_dump:
F07B: 2AA0EF   [16]     		ld 		hl, (addr)
F07E: ED5BA2EF [36]     		ld 		de, (addr2)
F082: CD93F1   [53]     		call 	dump
F085: 22A0EF   [69]     		ld 		(addr), hl
F088: 110000   [79]     		ld 		de, 0
F08B: ED53A2EF [99]     		ld 		(addr2), de
F08F: C30FF0   [109]    		jp 		read_line
                        ;
F092:                   write_mode:
F092: 23       [ 6]     		inc 	hl 		; next to ':'
F093: 7E       [13]     		ld 		a, (hl)
F094: FE20     [20]     		cp 		' '
F096: 28FA     [27|32]  		jr 		z, write_mode
                        		;
F098: 0E02     [34]     		ld 		c, 2
F09A: CDFAF1   [51]     		call 	hexstr_de
F09D: 79       [55]     		ld 		a, c 
F09E: FE02     [62]     		cp 		a, 2
F0A0: 2814     [69|74]  		jr 		z, write_mode.exit	; no arg or illegal char
F0A2: DD2AA0EF [89]     		ld 		ix, (addr)
F0A6: DD7300   [108]    		ld 		(ix), e
F0A9: DD23     [118]    		inc 	ix
F0AB: DD22A0EF [138]    		ld 		(addr), ix
F0AF: 7E       [145]    		ld 		a, (hl)
F0B0: FE00     [152]    		cp 		0
F0B2: 2802     [159|164]		jr 		z, write_mode.exit
F0B4: 18DC     [171]    		jr 		write_mode
F0B6:                   write_mode.exit
F0B6: C30FF0   [10]     		jp 		read_line
                        ;
F0B9:                   run_mode:
F0B9: 2AA0EF   [16]     		ld 		hl, (addr)
F0BC: E9       [20]     		jp 		(hl)
                        ;;
                        ;  clockspeed change by output number to port 128
F0BD:                   clk_mode:
F0BD: 7B       [ 4]     		ld 		a, e
F0BE: CD1BF2   [21]     		call 	clk_spd_change
F0C1: C30FF0   [31]     		jp 		read_line
                        ;
F0C4:                   mon_halt:
F0C4: 76       [ 4]     		halt
                        
                        
                        ; subroutines
                        ;
F0C5:                   getchar:
F0C5: DB00     [11]     		in 		a, (CONSTA)
F0C7: A7       [15]     		and 	a
F0C8: 28FB     [22|27]  		jr 		z, getchar
F0CA: DB01     [33]     		in 		a, (CONIO)
F0CC: C9       [43]     		ret
                        
                        ; getlin
                        ; read up to c bytes into buffer pointed by hl, end with 0
                        ; hl ... line buffer pointer
                        ; c  .... buffer limit length
F0CD:                   getln:
F0CD: 3600     [10]     		ld 		(hl), 0
F0CF: 0600     [17]     		ld 		b, 0		; char count
F0D1: CD5CF1   [34]     		call 	print_endl
F0D4: 3E2A     [41]     		ld 		a, '*'
F0D6: D301     [52]     		out 	(CONIO), a
                                ;
F0D8:                   getln_wait:
F0D8: CDC5F0   [17]     		call 	getchar
                        		;
F0DB: FE08     [24]     		cp 		$08 	;backspace
F0DD: 2817     [31|36]  		jr 		z, getln_bkspc
F0DF: FE7F     [38]     		cp 		$7f		; del
F0E1: 2813     [45|50]  		jr 		z, getln_bkspc
F0E3: FE0A     [52]     		cp 		$0a
F0E5: 2858     [59|64]  		jr 		z, getln_end
F0E7: FE0D     [66]     		cp 		$0d
F0E9: 2854     [73|78]  		jr 		z, getln_end
                        ; other ctrl codes
F0EB: FE1B     [80]     		cp 		$1b
F0ED: CA0CF1   [90|90]  		jp 		z, esc_seq_machine
F0F0: FE20     [97]     		cp 		$20
F0F2: 303E     [104|109]		jr 		nc, getln_echo_proceed
F0F4: 18E2     [116]    		jr 		getln_wait
                        
F0F6:                   getln_bkspc:
F0F6: 78       [ 4]     		ld 		a, b
F0F7: A7       [ 8]     		and 	a
F0F8: 28DE     [15|20]  		jr 		z, getln_wait
F0FA: 3E08     [22]     		ld 		a, $08
F0FC: D301     [33]     		out 	(CONIO), a
F0FE: 3E20     [40]     		ld 		a, ' '
F100: D301     [51]     		out 	(CONIO), a
F102: 3E08     [58]     		ld 		a, $08
F104: D301     [69]     		out 	(CONIO), a
F106: 2B       [75]     		dec 	hl
F107: 3600     [85]     		ld 		(hl), $0
F109: 05       [89]     		dec 	b
F10A: 18CC     [101]    		jr 		getln_wait
                        
F10C:                   esc_seq_machine:
F10C: DD21A4EF [14]     		ld		ix, escqbuf
F110: DD7700   [33]     		ld 		(ix), a
F113: DD23     [43]     		inc 	ix
F115: CDC5F0   [60]     		call 	getchar
F118: FE5B     [67]     		cp 		'['
F11A: 20BC     [74|79]  		jr 		nz, getln_wait
F11C: DD7700   [93]     		ld 		(ix), a
F11F: DD23     [103]    		inc 	ix
F121: CDC5F0   [120]    		call 	getchar
F124: FE44     [127]    		cp 		'D'
F126: C0       [132|138]		ret 	nz
F127: DD7700   [151]    		ld 		(ix), a
F12A: DD23     [161]    		inc 	ix
                        		clra	
F12C: AF       [165]    		xor 	a
F12D: DD7700   [184]    		ld 		(ix), a
                        		; echo back
F130: 18C4     [196]    		jr 		getln_bkspc
                        
F132:                   getln_echo_proceed:
F132: D301     [11]     		out 	(CONIO), a 		; echo back
                        		;
F134: 77       [18]     		ld 		(hl),a		; *ptr++ = a
F135: 23       [24]     		inc 	hl
F136: 3600     [34]     		ld 		(hl), $0	; *ptr = NULL
F138: 04       [38]     		inc 	b
F139: 78       [42]     		ld 		a, b
F13A: B9       [46]     		cp 		c
F13B: 3002     [53|58]  		jr 		nc, getln_end  ; force terminate line
F13D: 1899     [65]     		jr 		getln_wait
                        
F13F:                   getln_end:	; parse lbuf
F13F: C9       [10]     		ret
                        ;
                        ; print a nibble in A
F140:                   print_nibble:
F140: E60F     [ 7]     		and 	$0f
F142: FE0A     [14]     		cp 		$a
F144: C630     [21]     		add 	'0'
F146: FE3A     [28]     		cp 		':'
F148: 3802     [35|40]  		jr 		c, print_nibble_out
F14A: C607     [42]     		add 	7
F14C:                   print_nibble_out:
F14C: D301     [11]     		out 	(CONIO), a
F14E: C9       [21]     		ret
                        
                        ; print a byte in A
F14F:                   print_byte:
F14F: F5       [11]     		push 	af
F150: 07       [15]     		rlca
F151: 07       [19]     		rlca
F152: 07       [23]     		rlca
F153: 07       [27]     		rlca
F154: CD40F1   [44]     		call 	print_nibble
F157: F1       [54]     		pop 	af
F158: CD40F1   [71]     		call 	print_nibble
F15B: C9       [81]     		ret
                        
F15C:                   print_endl:
F15C: 3E0A     [ 7]     		ld 		a, $0a
F15E: D301     [18]     		out 	(CONIO), A
F160: 3E0D     [25]     		ld 		a, $0d
F162: D301     [36]     		out 	(CONIO), A
F164: C9       [46]     		ret
                        ;
                        ;
F165:                   print_str_hl:
F165: 7E       [ 7]     		ld 		a,(hl)
F166: A7       [11]     		and 	A
F167: C8       [16|22]  		ret 	z
F168: D301     [27]     		out 	(CONIO), a
F16A: 23       [33]     		inc 	hl
F16B: 18F8     [45]     		jr 		print_str_hl
                        ;
                        ;
F16D:                   print_err_msg:
F16D: E5       [11]     		push 	hl
F16E: F5       [22]     		push 	af
F16F: CD5CF1   [39]     		call 	print_endl
F172: 2189F1   [49]     		ld 		hl, str_err
F175: CD65F1   [66]     		call 	print_str_hl
F178: F1       [76]     		pop 	af
F179: CD4FF1   [93]     		call 	print_byte
F17C: CD5CF1   [110]    		call 	print_endl
F17F: E1       [120]    		pop 	hl
F180: 7C       [124]    		ld 		a, h
F181: CD4FF1   [141]    		call 	print_byte
F184: 7D       [145]    		ld 		a, l
F185: CD4FF1   [162]    		call 	print_byte
F188: C9       [172]    		ret
                        		;
F189:                   str_err:
F189: 0A0D6572          		db 	$0a, $0d, "error"
F18D: 726F72            
F190:                   str_endl:
F190: 0A0D00            		db $0a, $0d, 0
                        ;
                        
                        ; dump : dump memory from addr to addr+2 (value)
                        ; hl ... start address (will be trucated)
                        ; de ... end address
                        ;
                        ; bc ... the original start address
                        
F193:                   dump:
F193: 44       [ 4]     	ld 		b, h
F194: 4D       [ 8]     	ld 		c, l
F195: 3EF0     [15]     	ld 		a, $F0
F197: A5       [19]     	and 	l
F198: 6F       [23]     	ld 		l, a
F199:                   dump.print_header:
F199: CD5CF1   [17]     	call 	print_endl
F19C: 78       [21]     	ld 		a, b
F19D: CD4FF1   [38]     	call 	print_byte
F1A0: 79       [42]     	ld 		a, c
F1A1: CD4FF1   [59]     	call 	print_byte
F1A4: 3E20     [66]     	ld 		a, ' '
F1A6: D301     [77]     	out 	(CONIO), a
F1A8: 3E3A     [84]     	ld 		a, ':'
F1AA: D301     [95]     	out 	(CONIO), a
F1AC: 3E20     [102]    	ld 		a, ' '
F1AE: D301     [113]    	out 	(CONIO), a
                            ;
F1B0:                   dump.bytes:
                        	;cp 	bc, hl
F1B0: 78       [ 4]     	ld 		a, b
F1B1: BC       [ 8]     	cp 		h
F1B2: 2002     [15|20]  	jr 		nz, $+4
F1B4: 79       [19]     	ld 		a, c
F1B5: BD       [23]     	cp 		l
                        	;
F1B6: 380A     [30|35]  	jr 		c, dump.print_byte
F1B8: 2808     [37|42]  	jr 		z, dump.print_byte
                        ; print two-spaces
F1BA: 3E20     [44]     	ld 		a, ' '
F1BC: D301     [55]     	out 	(CONIO), a
F1BE: D301     [66]     	out 	(CONIO), a
F1C0: 1804     [78]     	jr 		dump.print_spc
F1C2:                   dump.print_byte
F1C2: 7E       [ 7]     	ld 		a, (hl)
F1C3: CD4FF1   [24]     	call 	print_byte
F1C6:                   dump.print_spc:
F1C6: 3E20     [ 7]     	ld 		a, ' '
F1C8: D301     [18]     	out 	(CONIO), a
F1CA: 23       [24]     	inc 	hl
                        	; cp 	de, hl
F1CB: 7A       [28]     	ld 		a, d
F1CC: BC       [32]     	cp 		h
F1CD: 2002     [39|44]  	jr 		nz, $+4; dump.cp_de_hl_end
F1CF: 7B       [43]     	ld 		a, e
F1D0: BD       [47]     	cp 		l
                        	; cp 	de, hl end
F1D1: C8       [52|58]  	ret 	z ; de == hl, then exit dump
F1D2: D8       [57|63]  	ret 	c ; de < hl, then exit dump
F1D3: 7D       [61]     	ld 		a, l 	; test whether the least 4 bits of address is zero
F1D4: E60F     [68]     	and 	$0f
F1D6: 20D8     [75|80]  	jr 		nz, dump.bytes
F1D8: 44       [79]     	ld 		b, h 
F1D9: 4D       [83]     	ld 		c, l
F1DA: 18BD     [95]     	jr 		dump.print_header  ; if so print address header
                            ;
                        
                        ; convert one char expressing a hexadecimal digit 
                        ; in A reg. to nibble in A
                        ; set carry flag if got a wrong char
                        ;
F1DC:                   hex2nib:
F1DC: FE30     [ 7]     		cp 		'0'
F1DE: D8       [12|18]  		ret 	c		; A < '0'
F1DF: FE3A     [19]     		cp 		'9' + 1
F1E1: 3003     [26|31]  		jr 		nc, hex2nib.alpha
F1E3: D630     [33]     		sub 	'0' 	; A was digit, results carry reset
F1E5: C9       [43]     		ret
F1E6:                   hex2nib.alpha:
F1E6: FE61     [ 7]     		cp 		'a'
F1E8: 3806     [14|19]  		jr 		c, hex2nib.upper
F1EA: FE67     [21]     		cp 		'f'+1
F1EC: 3F       [25]     		ccf		; set carry if A >= 'f'+1
F1ED: D8       [30|36]  		ret 	c
F1EE: E6DF     [37]     		and 	$df		; a - f to upper char
F1F0:                   hex2nib.upper:
F1F0: FE41     [ 7]     		cp 		'A'
F1F2: D8       [12|18]  		ret 	c
F1F3: FE47     [19]     		cp      'F' + 1
F1F5: 3F       [23]     		ccf
F1F6: D8       [28|34]  		ret 	c      ; error if it is larger than 'F'
F1F7: D637     [35]     		sub 	'A'-10
F1F9: C9       [45]     		ret
                        
                        ; read hexadecimal string char upto 2 or 4 (set in C) 
                        ; bytes from (HL) and return int val in DE
                        ; if non hexdec char is encountered at (HL), returns with current de value without inc hl.
                        ; if C upper-limit bytes has been read, returns with current de value with increment hl.
                        ; A reg. hold the last char read from (HL).
                        ;
F1FA:                   hexstr_de:
F1FA: 110000   [10]     		ld      de, 0000h
F1FD:                   hexstr_de.loop:
F1FD: 7E       [ 7]     		ld      a, (hl)
F1FE: CDDCF1   [24]     		call 	hex2nib
F201: D8       [29|35]  		ret 	c 			; encountered non-hexdec char.
F202:                   hexstr_de.hex2nib_succ:
F202: 0604     [ 7]     		ld 		b, 4
F204:                   hexstr_de.rl4:
F204: CB13     [ 8]     		rl      e		 ;rotate left entire de
F206: CB12     [16]     		rl      d
F208: 10FA     [24|29]  		djnz    hexstr_de.rl4
F20A: 83       [28]     		add 	e
F20B: 5F       [32]     		ld 		e, a
F20C: 23       [38]     		inc 	hl 		; 
F20D: 0D       [42]     		dec 	c
F20E: 20ED     [49|54]  		jr      nz, hexstr_de.loop
F210: C9       [59]     		ret 			; return after c bytes read
                        ;
                        ;
                        ; translate adcii char digit in A register
                        ; into integer value
F211:                   dec2nib:
F211: FE30     [ 7]     		cp 		'0'
F213: D8       [12|18]  		ret 	c		; A < '0'
F214: FE3A     [19]     		cp 		'9' + 1
F216: 3F       [23]     		ccf
F217: D8       [28|34]  		ret 	c
F218: D630     [35]     		sub 	'0' 	; A was digit, results carry reset
F21A: C9       [45]     		ret
                        ;
                        ;
                        
                        
                        
                        
                        ;
F21B:                   clk_spd_change:
F21B: E607     [ 7]     		and 	$07
F21D: D380     [18]     		out		(CLKMODE), a
F21F: C9       [28]     		ret
                        
                        ;
                        ; arithmetic routines
                        ;
                        ;8*8 multiplication
                        ;The following routine multiplies h by e and places the result in hl
F220:                   mul_h_e:
F220: 1600     [ 7]        ld	d, 0	; Combining the overhead and
F222: CB24     [15]        sla	h		; optimised first iteration
F224: 9F       [19]        sbc	a, a
F225: A3       [23]        and	e
F226: 6F       [27]        ld	l, a
                           ;
F227: 0607     [34]        ld	b, 7
F229:                   mul_h_e.loop:
F229: 29       [11]        add	hl, hl          
F22A: 3001     [18|23]     jr	nc, $+3
F22C: 19       [29]        add	hl, de
                           ;
F22D: 10FA     [37|42]     djnz	mul_h_e.loop
                           ;
F22F: C9       [47]        ret
                        
                        ; 16*8 multiplication
                        ; The following routine multiplies de by a and places the result in ahl
                        ; (which means a is the most significant byte of the product, l the least 
                        ; significant and h the intermediate one...)
                        ;
F230:                   mul_a_de:
F230: 0E00     [ 7]        ld	c, 0
F232: 61       [11]        ld	h, c
F233: 6C       [15]        ld	l, h
                           ;
F234: 87       [19]        add	a, a		; optimised 1st iteration
F235: 3002     [26|31]     jr	nc, $+4
F237: 62       [30]        ld	h,d
F238: 6B       [34]        ld	l,e
                           ;
F239: 0607     [41]        ld b, 7
F23B:                   mul_a_de.loop:
F23B: 29       [11]        add	hl, hl
F23C: 17       [15]        rla
F23D: 3002     [22|27]     jr	nc, $+4
F23F: 19       [33]        add	hl, de
F240: 89       [37]        adc	a, c   		; yes this is actually adc a, 0 but since c is free we set it to zero and so we can save 1 byte and up to 3 T-states per iteration
                           ;
F241: 100E     [45|50]     djnz	_loop
                           ;   
F243: C9       [55]        ret
                        
                        ;
                        ; 16*16 multiplication
                        ;The following routine multiplies bc by de and places the result in dehl.
F244:                   mul_de_bc:
F244: 210000   [10]        ld	hl, 0
                        
F247: CB23     [18]        sla	e		; optimised 1st iteration
F249: CB12     [26]        rl	d
F24B: 3002     [33|38]     jr	nc, $+4
F24D: 60       [37]        ld	h, b
F24E: 69       [41]        ld	l, c
                        
F24F: 3E0F     [48]        ld	a, 15
F251:                   _loop:
F251: 29       [11]        add	hl, hl
F252: CB13     [19]        rl	e
F254: CB12     [27]        rl	d
F256: 3004     [34|39]     jr	nc, $+6
F258: 09       [45]        add	hl, bc
F259: 3001     [52|57]     jr	nc, $+3
F25B: 13       [58]        inc	de
                           
F25C: 3D       [62]        dec	a
F25D: 20F2     [69|74]     jr	nz, _loop
                           
F25F: C9       [79]        ret
                         
                         
                        ; divide dividiend in d by divisor in e 
                        ; returns quotient in d and remainder in a
F260:                   div_d_e:
F260: AF       [ 4]        xor	a
F261: 0608     [11]        ld	b, 8
                           ;
F263:                   div_d_e_loop:
F263: CB22     [ 8]        sla	d
F265: 17       [12]        rla
F266: BB       [16]        cp	e
F267: 3802     [23|28]     jr	c, $+4
F269: 93       [27]        sub	e
F26A: 14       [31]        inc	d
                           ;
F26B: 10F6     [39|44]     djnz	div_d_e_loop
                           ;
F26D: C9       [49]        ret
                        
                        ; dvi_hl_de stack in out wrapper
                        ; [ret addr] [dividiend] [divisor] 
                        ; --> [ret addr] [quotient] [reminder]
F26E:                   div16:
F26E: DD210200 [14]         ld      ix, 02
F272: DD39     [29]         add     ix, sp
F274: DD4E00   [48]         ld      c, (ix)
F277: DD7E01   [67]         ld      a, (ix+1)
F27A: DD5E02   [86]         ld      de, (ix+2)
F27D: DD5603   [105]    
F280: CD90F2   [122]        call    div_ac_de
F283: DD7502   [141]        ld      (ix+2), hl
F286: DD7403   [160]    
F289: DD7100   [179]        ld      (ix), c
F28C: DD7701   [198]        ld      (ix+1), a
F28F: C9       [208]        ret
                        
                        ; The following routine divides ac (dividiend) by de (divisor) and 
                        ; places the quotient in ac and the remainder in hl
                        ; destrys hl, a, b, c, d, e, ix
                        ; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Division
                        ;
F290:                   div_ac_de:
F290: 210000   [10]         ld	    hl, 0
F293: 0610     [17]         ld	    b, 16
F295:                   div_ac_de_loop:
F295: CB31     [ 8]         sll	c
F297: 17       [12]         rla
F298: ED6A     [27]         adc	hl, hl
F29A: ED52     [42]         sbc	hl, de
F29C: 3002     [49|54]      jr	nc, $+4 
F29E: 19       [60]         add	hl, de
F29F: 0D       [64]         dec	c
                            
F2A0: 10F3     [72|77]      djnz	div_ac_de_loop
F2A2: C9       [82]         ret
                        
                        
                        ; dvi_hl_c stack in out wrapper
                        ; [ret addr] [dividiend] [divisor:low] 
                        ; --> [ret addr] [quotient] [reminder:low]
F2A3:                   div16_8:
F2A3: DD210200 [14]         ld      ix, 02
F2A7: DD39     [29]         add     ix, sp
F2A9: DD6E00   [48]         ld      hl, (ix)
F2AC: DD6601   [67]     
F2AF: DD4E02   [86]         ld      c, (ix+2)
F2B2: CDBFF2   [103]        call    div_hl_c
F2B5: DD7500   [122]        ld      (ix), hl
F2B8: DD7401   [141]    
F2BB: DD7702   [160]        ld      (ix+2), a
F2BE: C9       [170]        ret
                        
                        ; divides hl by c and places the quotient in hl 
                        ; and the remainder in a
F2BF:                   div_hl_c:
F2BF: AF       [ 4]        xor	a
F2C0: 0610     [11]        ld	b, 16
                        
F2C2:                   div_hl_c_loop:
F2C2: 29       [11]        add	hl, hl
F2C3: 17       [15]        rla
F2C4: 3803     [22|27]     jr	c, $+5
F2C6: B9       [26]        cp	c
F2C7: 3802     [33|38]     jr	c, $+4
                        
F2C9: 91       [37]        sub	c
F2CA: 2C       [41]        inc	l
                           
F2CB: 10F5     [49|54]     djnz	div_hl_c_loop
                           
F2CD: C9       [59]        ret
                        
                        
                        ; print the decimal integer in HL 
F2CE:                   print_hl_dec:
F2CE: AF       [ 4]     	xor 	a
F2CF: F5       [15]     	push 	af 		; terminal null char
F2D0: 0E0A     [22]     	ld 		c, 10 	; radix = 10
                        
F2D2:                   print_hl_dec_loop0:
F2D2: CDBFF2   [17]     	call 	div_hl_c 	; a = hl % 10, hl = hl / 10
F2D5: C630     [24]     	add 	a, $30		; to ascii code between '0' and '9'
F2D7: F5       [35]     	push 	af
F2D8: 7C       [39]     	ld 		a, h 		; check whether hl is empty
F2D9: B5       [43]     	or 		l
F2DA: 2802     [50|55]  	jr 		z, print_hl_dec_output		; if z then conversion finished
F2DC: 18F4     [62]     	jr 		print_hl_dec_loop0
                        
F2DE:                   print_hl_dec_output:
F2DE: F1       [10]     	pop 	af
F2DF: A7       [14]     	and 	a
F2E0: C8       [19|25]  	ret 	z
F2E1: D302     [30]     	out 	(2), a
F2E3: 18F9     [42]     	jr 		print_hl_dec_output


; +++ segments +++

#CODE          = $F000 = 61440,  size = $02E5 =   741

; +++ global symbols +++

BUFSIZE            = $003F =    63          rom_mon_F000.asm:44
BUSDISP            = $0081 =   129          rom_mon_F000.asm:16 (unused)
CLKMODE            = $0080 =   128          rom_mon_F000.asm:15
CONIO              = $0001 =     1          rom_mon_F000.asm:13
CONSTA             = $0000 =     0          rom_mon_F000.asm:12
_end               = $F2E5 = 62181          rom_mon_F000.asm:48 (unused)
_loop              = $F251 = 62033          rom_mon_F000.asm:512
_size              = $02E5 =   741          rom_mon_F000.asm:48 (unused)
addr               = $EFA0 = 61344          rom_mon_F000.asm:40
addr2              = $EFA2 = 61346          rom_mon_F000.asm:41
clk_mode           = $F0BD = 61629          rom_mon_F000.asm:152
clk_spd_change     = $F21B = 61979          rom_mon_F000.asm:445
dec2nib            = $F211 = 61969          rom_mon_F000.asm:430 (unused)
default_dump       = $F063 = 61539          rom_mon_F000.asm:102
div16              = $F26E = 62062          rom_mon_F000.asm:548 (unused)
div16_8            = $F2A3 = 62115          rom_mon_F000.asm:584 (unused)
div_ac_de          = $F290 = 62096          rom_mon_F000.asm:565
div_ac_de_loop     = $F295 = 62101          rom_mon_F000.asm:568
div_d_e            = $F260 = 62048          rom_mon_F000.asm:529 (unused)
div_d_e_loop       = $F263 = 62051          rom_mon_F000.asm:533
div_hl_c           = $F2BF = 62143          rom_mon_F000.asm:596
div_hl_c_loop      = $F2C2 = 62146          rom_mon_F000.asm:600
do_dump            = $F07B = 61563          rom_mon_F000.asm:116
dump               = $F193 = 61843          rom_mon_F000.asm:317
dump.bytes         = $F1B0 = 61872          rom_mon_F000.asm:336
dump.print_byte    = $F1C2 = 61890          rom_mon_F000.asm:351
dump.print_header  = $F199 = 61849          rom_mon_F000.asm:323
dump.print_spc     = $F1C6 = 61894          rom_mon_F000.asm:354
esc_seq_machine    = $F10C = 61708          rom_mon_F000.asm:214
escqbuf            = $EFA4 = 61348          rom_mon_F000.asm:42
getchar            = $F0C5 = 61637          rom_mon_F000.asm:163
getln              = $F0CD = 61645          rom_mon_F000.asm:174
getln_bkspc        = $F0F6 = 61686          rom_mon_F000.asm:199
getln_echo_proceed = $F132 = 61746          rom_mon_F000.asm:233
getln_end          = $F13F = 61759          rom_mon_F000.asm:245
getln_wait         = $F0D8 = 61656          rom_mon_F000.asm:181
hex2nib            = $F1DC = 61916          rom_mon_F000.asm:379
hex2nib.alpha      = $F1E6 = 61926          rom_mon_F000.asm:386
hex2nib.upper      = $F1F0 = 61936          rom_mon_F000.asm:393
hexstr_de          = $F1FA = 61946          rom_mon_F000.asm:408
hexstr_de.hex2nib_succ = $F202 = 61954          rom_mon_F000.asm:414 (unused)
hexstr_de.loop     = $F1FD = 61949          rom_mon_F000.asm:410
hexstr_de.rl4      = $F204 = 61956          rom_mon_F000.asm:416
lbuf               = $EFB0 = 61360          rom_mon_F000.asm:43
mon                = $F000 = 61440          rom_mon_F000.asm:49
mon_halt           = $F0C4 = 61636          rom_mon_F000.asm:157
mul_a_de           = $F230 = 62000          rom_mon_F000.asm:477 (unused)
mul_a_de.loop      = $F23B = 62011          rom_mon_F000.asm:488 (unused)
mul_de_bc          = $F244 = 62020          rom_mon_F000.asm:502 (unused)
mul_h_e            = $F220 = 61984          rom_mon_F000.asm:455 (unused)
mul_h_e.loop       = $F229 = 61993          rom_mon_F000.asm:463
print_byte         = $F14F = 61775          rom_mon_F000.asm:261
print_endl         = $F15C = 61788          rom_mon_F000.asm:272
print_err_msg      = $F16D = 61805          rom_mon_F000.asm:289
print_hl_dec       = $F2CE = 62158          rom_mon_F000.asm:616 (unused)
print_hl_dec_loop0 = $F2D2 = 62162          rom_mon_F000.asm:621
print_hl_dec_output = $F2DE = 62174          rom_mon_F000.asm:630
print_nibble       = $F140 = 61760          rom_mon_F000.asm:249
print_nibble_out   = $F14C = 61772          rom_mon_F000.asm:256
print_str_hl       = $F165 = 61797          rom_mon_F000.asm:280
read_line          = $F00F = 61455          rom_mon_F000.asm:54
run_mode           = $F0B9 = 61625          rom_mon_F000.asm:147
specify_end        = $F04F = 61519          rom_mon_F000.asm:91
str_endl           = $F190 = 61840          rom_mon_F000.asm:307 (unused)
str_err            = $F189 = 61833          rom_mon_F000.asm:305
write_mode         = $F092 = 61586          rom_mon_F000.asm:125
write_mode.exit    = $F0B6 = 61622          rom_mon_F000.asm:144


total time: 0.0015 sec.
no errors
