                        ; --------------------------------------
                        ; zasm: assemble "mon_v02.asm"
                        ; date: 2025-09-20 01:37:45
                        ; --------------------------------------


                        ;
0000:                   	    org 	0000h
0000:                   rst:
0000: 310002   [10]     	    ld 		sp, 0200h
0003: C31000   [20]     	    jp  	mon
                        ;
                        ;;
                        ; a  ... workspace reg.
                        ; b  ... workspace reg. dnjz counter
                        ; c  ... command
                        ; de ... address
                        ; ix ...  mon_curr_addr, curr_addr + 2 == end_addr
                        ;
                        		org 	0180h
0180: 0000              addr:	dw		$0
0182: 0000              value:	dw 		$0
0184: 0000              status:	db 		0, 0
0186: 00000000          lbuf:	ds 		16, 0
018A: 00...             
                        
                                org     0010h
0010:                   mon:            ;entry point
0010: DD218001 [14]     		ld 		ix, addr
0014:                   read_line:
0014: CD5700   [17]     		call	getln
                        		;ld 	hl, lbuf ; debug print
                        		;call 	print_str_hl
                        
0017: 218601   [27]     		ld 		hl, lbuf
001A: 7E       [34]     		ld 		a, (hl)
001B: FE00     [41]     		cp 		$0
001D: 2813     [48|53]  		jr 		z, default_dump
                        		;
001F: FE48     [55]     		cp 		'H'
0021: 2833     [62|67]  		jr 		z, mon_halt
                        
0023: 0E04     [69]     		ld 		c, 4
0025: CDCA00   [86]     		call 	hexstr_de
0028: DD7300   [105]    		ld 		(ix), de
002B: DD7201   [124]    
002E: FEFF     [131]    		cp 		$ff
0030: 2811     [138|143]		jr 		z, error
                        
0032:                   default_dump:
0032: DD6E00   [19]     		ld 		hl, (ix)
0035: DD6601   [38]     
0038: CD0F01   [55]     		call 	dump
003B: DD7500   [74]     		ld 		(ix), hl
003E: DD7401   [93]     
                        		; call 	print_endl
0041: 18D1     [105]    		jr 		read_line
                        ; 
0043:                   error:
0043: 214B00   [10]     		ld 		hl, msg
0046: CDE400   [27]     		call 	print_str_hl
0049: 18C9     [39]     		jr 		read_line
                        
004B: 0A0D              msg:	db $0a, $0d
004D: 6572726F          		db "error?"
0051: 723F              
0053: 0A0D00            		db $0a, $0d, 0
                        
0056:                   mon_halt:
0056: 76       [ 4]     		halt
                        
                        ; バッファ方式にしてるから最大4ニブルを一気に読んだ方がかんたんでは？
                        
                        
                        ; subroutines
                        
0057:                   getln:
0057: 218601   [10]     		ld 		hl, lbuf 	; buf ptr
005A: 3600     [20]     		ld 		(hl), 0
005C: 0600     [27]     		ld 		b, 0		; char count
005E: DD5E00   [46]     		ld 		de, (ix)
0061: DD5601   [65]     
                        
0064: CD0601   [82]     		call 	print_endl
0067: 3E2A     [89]     		ld 		a, '*'
0069: D302     [100]    		out 	(2), a
                        
006B:                   getln_wait:
006B: DB00     [11]     		in 		a, (0)
006D: A7       [15]     		and 	a
006E: 28FB     [22|27]  		jr 		z, getln_wait
                        ;
                        ; no echo back
0070: DB01     [33]     		in 		a, (1)
0072: FE08     [40]     		cp 		$08 	;backspace
0074: 2812     [47|52]  		jr 		z, getln_bkspc
0076: FE7F     [54]     		cp 		$7f		; del
0078: 280E     [61|66]  		jr 		z, getln_bkspc
007A: FE0A     [68]     		cp 		$0a
007C: 282E     [75|80]  		jr 		z, getln_end
007E: FE0D     [82]     		cp 		$0d
0080: 282A     [89|94]  		jr 		z, getln_end
                        ; other ctrl codes
0082: FE20     [96]     		cp 		$20
0084: 3018     [103|108]		jr 		nc, getln_echo_proceed
0086: 18E3     [115]    		jr 		getln_wait
                        
0088:                   getln_bkspc:
0088: 78       [ 4]     		ld 		a, b
0089: A7       [ 8]     		and 	a
008A: 28DF     [15|20]  		jr 		z, getln_wait
008C: 3E08     [22]     		ld 		a, $08
008E: D302     [33]     		out 	(2), a
0090: 3E20     [40]     		ld 		a, ' '
0092: D302     [51]     		out 	(2), a
0094: 3E08     [58]     		ld 		a, $08
0096: D302     [69]     		out 	(2), a
0098: 2B       [75]     		dec 	hl
0099: 3600     [85]     		ld 		(hl), $0
009B: 05       [89]     		dec 	b
009C: 18CD     [101]    		jr 		getln_wait
                        
009E:                   getln_echo_proceed:
009E: D302     [11]     		out 	(2), a 		; echo back
                        		;
00A0: 77       [18]     		ld 		(hl),a		; *ptr++ = a
00A1: 23       [24]     		inc 	hl
00A2: 3600     [34]     		ld 		(hl), $0	; *ptr = NULL
00A4: 04       [38]     		inc 	b
00A5: 78       [42]     		ld 		a, b
00A6: FE0F     [49]     		cp 		15
00A8: 3002     [56|61]  		jr 		nc, getln_end  ; force terminate line
00AA: 18BF     [68]     		jr 		getln_wait
                        
00AC:                   getln_end:	; parse lbuf
00AC: C9       [10]     		ret
                        
                        
                        ; convert one char expressing a hexadecimal digit 
                        ; in A reg. to nibble in A
                        ;
00AD:                   hex2nib:
00AD: FE61     [ 7]     		cp      'a'     ; check whether a lower case
00AF: 3802     [14|19]  		jr      c, hex2nib_alnum  ; a digit or an upper case if carry set
00B1: E6DF     [21]     		and     $df     ; lower case to upper case
00B3:                   hex2nib_alnum:
00B3: FE3A     [ 7]     		cp      '9' + 1 ; check whether a digit
00B5: 3005     [14|19]  		jr      nc, hex2nib_alpha  ; possibly an upper case letter if carry not set
00B7: D630     [21]     		sub     a, '0'  ; digit to int value
00B9: 380C     [28|33]  		jr      c, hex2nib_err     ; it was not '0' - '9' 
00BB: C9       [38]     		ret
00BC:                   hex2nib_alpha:
00BC: FE47     [ 7]     		cp      'F'+1   ; check the digit whether less than 'F'
00BE: 3007     [14|19]  		jr      nc, hex2nib_err      ; error if it is larger than 'F'
00C0: D641     [21]     		sub     'A'  	; A - F to integer 0 - 5
00C2: 3803     [28|33]  		jr      c, hex2nib_err       ; it was not 'A' - 'F'
00C4: C60A     [35]     		add     a, 10   ; A - F to 10 - 15 by +5
00C6: C9       [45]     		ret
                        
00C7:                   hex2nib_err:
00C7: F6FF     [ 7]     		or 		$ff
00C9: C9       [17]     		ret
                        
                        
                        ; read hexadecimal string char upto 2 or 4 (set in c) 
                        ; bytes from (hl) and return int val in de
                        ;
00CA:                   hexstr_de:
00CA: 110000   [10]         ld      de, 0000h
00CD:                   hexstr_de_lp:
00CD: 7E       [ 7]         ld      a, (hl)
00CE: CDAD00   [24]     	call 	hex2nib
00D1: FEFF     [31]     	cp 		$ff
00D3: C8       [36|42]  	ret 	z
00D4: A7       [40]     	and 	a		; clear Carry bit
00D5: 0604     [47]     	ld 		b, 4
00D7:                   hexstr_de_rl4:
00D7: CB13     [ 8]         rl      e		 ;rotate left entire de
00D9: CB12     [16]         rl      d
00DB: 10FA     [24|29]      djnz    hexstr_de_rl4
00DD: 83       [28]     	add 	e
00DE: 5F       [32]     	ld 		e, a
00DF: 23       [38]         inc     hl
00E0: 0D       [42]     	dec 	c
00E1: 20EA     [49|54]      jr      nz, hexstr_de_lp
00E3: C9       [59]     	ret
                        
                        
                        ;
                        ;
00E4:                   print_str_hl:
00E4: 7E       [ 7]     		ld 		a,(hl)
00E5: A7       [11]     		and 	A
00E6: C8       [16|22]  		ret 	z
00E7: D302     [27]     		out 	(2), a
00E9: 23       [33]     		inc 	hl
00EA: 18F8     [45]     		jr 		print_str_hl
                        
                        ; print a nibble in A
00EC:                   print_nibble:
00EC: E60F     [ 7]     		and 	$0f
00EE: C630     [14]     		add 	'0'
00F0: FE3A     [21]     		cp 		':'
00F2: 3802     [28|33]  		jr 		c, print_nibble_out
00F4: C607     [35]     		add 	7
00F6:                   print_nibble_out:
00F6: D302     [11]     		out 	(2), a
00F8: C9       [21]     		ret
                        
                        ; print a byte in A
00F9:                   print_byte:
00F9: F5       [11]     		push 	af
00FA: 07       [15]     		rlca
00FB: 07       [19]     		rlca
00FC: 07       [23]     		rlca
00FD: 07       [27]     		rlca
00FE: CDEC00   [44]     		call 	print_nibble
0101: F1       [54]     		pop 	af
0102: CDEC00   [71]     		call 	print_nibble
0105: C9       [81]     		ret
                        
0106:                   print_endl:
0106: 3E0A     [ 7]     		ld 		a, $0a
0108: D302     [18]     		out 	(2), A
010A: 3E0D     [25]     		ld 		a, $0d
010C: D302     [36]     		out 	(2), A
010E: C9       [46]     		ret
                        
                        ; dump memory b bytes from address in hl
010F:                   dump:
010F:                   dump_header:
010F: CD0601   [17]     	call 	print_endl
0112: 7C       [21]     	ld 		a, h
0113: CDF900   [38]     	call 	print_byte
0116: 7D       [42]     	ld 		a, l
0117: CDF900   [59]     	call 	print_byte
011A: 3E20     [66]     	ld 		a, ' '
011C: D302     [77]     	out 	(2), a
011E: 3E3A     [84]     	ld 		a, ':'
0120: D302     [95]     	out 	(2), a
0122: 3E20     [102]    	ld 		a, ' '
0124: D302     [113]    	out 	(2), a
                        ;
0126: 0610     [120]    	ld 		b, 16
0128:                   dump_16:
0128: 7E       [ 7]     	ld 		a, (hl)
0129: CDF900   [24]     	call 	print_byte
012C: 3E20     [31]     	ld 		a, ' '
012E: D302     [42]     	out 	(2), a
0130: 23       [48]     	inc 	hl
                        ;
0131: 10F5     [56|61]  	djnz 	dump_16
                        
0133:                   dump_exit:
0133: C9       [10]     	ret


; +++ segments +++

#CODE          = $0000 =     0,  size = $0196 =   406

; +++ global symbols +++

_end               = $0196 =   406          mon_v02.asm:2 (unused)
_size              = $0196 =   406          mon_v02.asm:2 (unused)
addr               = $0180 =   384          mon_v02.asm:15
default_dump       = $0032 =    50          mon_v02.asm:42
dump               = $010F =   271          mon_v02.asm:218
dump_16            = $0128 =   296          mon_v02.asm:233
dump_exit          = $0133 =   307          mon_v02.asm:242 (unused)
dump_header        = $010F =   271          mon_v02.asm:219 (unused)
error              = $0043 =    67          mon_v02.asm:49
getln              = $0057 =    87          mon_v02.asm:66
getln_bkspc        = $0088 =   136          mon_v02.asm:96
getln_echo_proceed = $009E =   158          mon_v02.asm:111
getln_end          = $00AC =   172          mon_v02.asm:123
getln_wait         = $006B =   107          mon_v02.asm:76
hex2nib            = $00AD =   173          mon_v02.asm:130
hex2nib_alnum      = $00B3 =   179          mon_v02.asm:134
hex2nib_alpha      = $00BC =   188          mon_v02.asm:140
hex2nib_err        = $00C7 =   199          mon_v02.asm:148
hexstr_de          = $00CA =   202          mon_v02.asm:156
hexstr_de_lp       = $00CD =   205          mon_v02.asm:158
hexstr_de_rl4      = $00D7 =   215          mon_v02.asm:165
lbuf               = $0186 =   390          mon_v02.asm:18
mon                = $0010 =    16          mon_v02.asm:21
mon_halt           = $0056 =    86          mon_v02.asm:58
msg                = $004B =    75          mon_v02.asm:54
print_byte         = $00F9 =   249          mon_v02.asm:199
print_endl         = $0106 =   262          mon_v02.asm:210
print_nibble       = $00EC =   236          mon_v02.asm:188
print_nibble_out   = $00F6 =   246          mon_v02.asm:194
print_str_hl       = $00E4 =   228          mon_v02.asm:179
read_line          = $0014 =    20          mon_v02.asm:23
rst                = $0000 =     0          mon_v02.asm:3 (unused)
status             = $0184 =   388          mon_v02.asm:17 (unused)
value              = $0182 =   386          mon_v02.asm:16 (unused)


total time: 0.0012 sec.
no errors
