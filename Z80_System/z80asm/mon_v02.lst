                        ; --------------------------------------
                        ; zasm: assemble "mon_v02.asm"
                        ; date: 2025-09-19 12:50:38
                        ; --------------------------------------


                        ;
0000:                   	    org 	0000h
0000:                   rst:
0000: 310002   [10]     	    ld 		sp, 0200h
0003: C34000   [20]     	    jp  	mon
                        ;
                        ;;
                        ; a  ... workspace reg.
                        ; b  ... workspace reg. dnjz counter
                        ; c  ... command
                        ; de ... address
                        ; ix ...  mon_curr_addr, curr_addr + 2 == end_addr
                        ;
                        		org 	0020h
0020: 0000              addr:	dw		$0
0022: 0000              valu:	dw 		$0
0024: 0000              status:	db 		0, 0
0026: 00000000          lbuf:	ds 		16, 0
002A: 00...             
                        
                                org     0040h
0040:                   mon:            ;entry point
0040: DD212000 [14]     		ld 		ix, addr
0044: FD212400 [28]     		ld 		iy, status
0048:                   read_line:
0048: CDC000   [17]     		call	getln
004B: 212600   [27]     		ld 		hl, lbuf
                        		; item 0
004E: FD360000 [46]     		ld 		(iy), 0
0052: 7E       [53]     		ld 		a, (hl)
0053: FE00     [60]     		cp 		$0
0055: 2857     [67|72]  		jr 		z, default_dump
                        		;
0057: FE48     [74]     		cp 		'H'
0059: 2864     [81|86]  		jr 		z, mon_halt
005B: FE2E     [88]     		cp 		'.'
005D: 202D     [95|100] 		jr 		nz, __skip1
                        
                        		; dump with the end address after '.'
005F: 23       [101]    		inc 	hl
0060: 0E04     [108]    		ld 		c, 4
0062: CD3301   [125]    		call 	hexstr_de
0065: DD7302   [144]    		ld 		(ix+2), de
0068: DD7203   [163]    
006B: DD6E00   [182]    		ld 		hl, (ix)
006E: DD6601   [201]    
0071:                   loop_dump:
0071: CD7801   [17]     		call 	dump
0074: 7C       [21]     		ld 		a, h
0075: DDBE02   [40]     		cp 		(ix+2)
0078: FA8A00   [50|50]  		jp 		s, ___skip
007B: 2802     [57|62]  		jr 		z, ___low_8
007D: 180B     [69]     		jr 		___skip
007F:                   ___low_8:
007F: 7D       [ 4]     		ld 		a, l
0080: DDBE01   [23]     		cp 		(ix+1)
0083: FA8A00   [33|33]  		jp 		s, ___skip
0086: 2802     [40|45]  		jr 		z, ___skip
                        		; loop dump
0088: 18E7     [52]     		jr 		loop_dump
008A:                   ___skip:
008A: 18BC     [12]     		jr 		read_line
                        
008C:                   __skip1:
008C: FE3A     [ 7]     		cp 		':'
008E: 2013     [14|19]  		jr 		nz, __skip2
0090: FD360003 [33]     		ld 		(iy), 3 ; write bytes loop
0094: 23       [39]     		inc 	hl
0095: 0E02     [46]     		ld 		c, 2
0097: CD3301   [63]     		call 	hexstr_de
009A: DD7300   [82]     		ld 		(ix), e
009D: 212000   [92]     		ld 		hl, addr
00A0: 73       [99]     		ld 		(hl), e
                        		; loop dump
00A1: 18A5     [111]    		jr 		read_line
                        
00A3:                   __skip2:
                        		;
00A3:                   read_hexstr:
00A3: 0E04     [ 7]     		ld 		c, 4
00A5: CD3301   [24]     		call 	hexstr_de
00A8: DD7300   [43]     		ld 		(ix), de
00AB: DD7201   [62]     
00AE:                   default_dump:
00AE: DD6E00   [19]     		ld 		hl, (ix)
00B1: DD6601   [38]     
00B4: CD7801   [55]     		call 	dump
00B7: DD7500   [74]     		ld 		(ix), hl
00BA: DD7401   [93]     
                        		; call 	print_endl
00BD: 1889     [105]    		jr 		read_line
                        ; 
00BF:                   mon_halt:
00BF: 76       [ 4]     		halt
                        
                        ; バッファ方式にしてるから最大4ニブルを一気に読んだ方がかんたんでは？
                        
                        
                        ; subroutines
                        
00C0:                   getln:
00C0: 212600   [10]     		ld 		hl, lbuf 	; buf ptr
00C3: 3600     [20]     		ld 		(hl), 0
00C5: 0600     [27]     		ld 		b, 0		; char count
00C7: DD5E00   [46]     		ld 		de, (ix)
00CA: DD5601   [65]     
                        
00CD: CD6F01   [82]     		call 	print_endl
00D0: 3E2A     [89]     		ld 		a, '*'
00D2: D302     [100]    		out 	(2), a
                        
00D4:                   getln_wait:
00D4: DB00     [11]     		in 		a, (0)
00D6: A7       [15]     		and 	a
00D7: 28FB     [22|27]  		jr 		z, getln_wait
                        ;
                        ; no echo back
00D9: DB01     [33]     		in 		a, (1)
00DB: FE08     [40]     		cp 		$08 	;backspace
00DD: 2812     [47|52]  		jr 		z, getln_bkspc
00DF: FE7F     [54]     		cp 		$7f		; del
00E1: 280E     [61|66]  		jr 		z, getln_bkspc
00E3: FE0A     [68]     		cp 		$0a
00E5: 282E     [75|80]  		jr 		z, getln_end
00E7: FE0D     [82]     		cp 		$0d
00E9: 282A     [89|94]  		jr 		z, getln_end
                        ; other ctrl codes
00EB: FE20     [96]     		cp 		$20
00ED: 3018     [103|108]		jr 		nc, getln_echo_proceed
00EF: 18E3     [115]    		jr 		getln_wait
                        
00F1:                   getln_bkspc:
00F1: 78       [ 4]     		ld 		a, b
00F2: A7       [ 8]     		and 	a
00F3: 28DF     [15|20]  		jr 		z, getln_wait
00F5: 3E08     [22]     		ld 		a, $08
00F7: D302     [33]     		out 	(2), a
00F9: 3E20     [40]     		ld 		a, ' '
00FB: D302     [51]     		out 	(2), a
00FD: 3E08     [58]     		ld 		a, $08
00FF: D302     [69]     		out 	(2), a
0101: 2B       [75]     		dec 	hl
0102: 3600     [85]     		ld 		(hl), $0
0104: 05       [89]     		dec 	b
0105: 18CD     [101]    		jr 		getln_wait
                        
0107:                   getln_echo_proceed:
0107: D302     [11]     		out 	(2), a 		; echo back
                        		;
0109: 77       [18]     		ld 		(hl),a		; *ptr++ = a
010A: 23       [24]     		inc 	hl
010B: 3600     [34]     		ld 		(hl), $0	; *ptr = NULL
010D: 04       [38]     		inc 	b
010E: 78       [42]     		ld 		a, b
010F: FE0F     [49]     		cp 		15
0111: 3002     [56|61]  		jr 		nc, getln_end  ; force terminate line
0113: 18BF     [68]     		jr 		getln_wait
                        
0115:                   getln_end:	; parse lbuf
0115: C9       [10]     		ret
                        
                        
                        ; convert one char expressing a hexadecimal digit 
                        ; in A reg. to nibble in A
                        ;
0116:                   hex2nib:
0116: FE61     [ 7]     		cp      'a'     ; check whether a lower case
0118: 3802     [14|19]  		jr      c, hex2nib_alnum  ; a digit or an upper case if carry set
011A: E6DF     [21]     		and     $df     ; lower case to upper case
011C:                   hex2nib_alnum:
011C: FE3A     [ 7]     		cp      '9' + 1 ; check whether a digit
011E: 3005     [14|19]  		jr      nc, hex2nib_alpha  ; possibly an upper case letter if carry not set
0120: D630     [21]     		sub     a, '0'  ; digit to int value
0122: 380C     [28|33]  		jr      c, hex2nib_err     ; it was not '0' - '9' 
0124: C9       [38]     		ret
0125:                   hex2nib_alpha:
0125: FE47     [ 7]     		cp      'F'+1   ; check the digit whether less than 'F'
0127: 3007     [14|19]  		jr      nc, hex2nib_err      ; error if it is larger than 'F'
0129: D641     [21]     		sub     'A'  	; A - F to integer 0 - 5
012B: 3803     [28|33]  		jr      c, hex2nib_err       ; it was not 'A' - 'F'
012D: C60A     [35]     		add     a, 10   ; A - F to 10 - 15 by +5
012F: C9       [45]     		ret
                        
0130:                   hex2nib_err:
0130: F6FF     [ 7]     		or 		$ff
0132: C9       [17]     		ret
                        
                        
                        ; read hexadecimal string char upto 2 or 4 (set in c) 
                        ; bytes from (hl) and return int val in de
                        ;
0133:                   hexstr_de:
0133: 110000   [10]         ld      de, 0000h
0136:                   hexstr_de_lp:
0136: 7E       [ 7]         ld      a, (hl)
0137: CD1601   [24]     	call 	hex2nib
013A: FEFF     [31]     	cp 		$ff
013C: C8       [36|42]  	ret 	z
013D: A7       [40]     	and 	a		; clear Carry bit
013E: 0604     [47]     	ld 		b, 4
0140:                   hexstr_de_rl4:
0140: CB13     [ 8]         rl      e		 ;rotate left entire de
0142: CB12     [16]         rl      d
0144: 10FA     [24|29]      djnz    hexstr_de_rl4
0146: 83       [28]     	add 	e
0147: 5F       [32]     	ld 		e, a
0148: 23       [38]         inc     hl
0149: 0D       [42]     	dec 	c
014A: 20EA     [49|54]      jr      nz, hexstr_de_lp
014C: C9       [59]     	ret
                        
                        
                        ;
                        ;
014D:                   print_str_hl:
014D: 7E       [ 7]     		ld 		a,(hl)
014E: A7       [11]     		and 	A
014F: C8       [16|22]  		ret 	z
0150: D302     [27]     		out 	(2), a
0152: 23       [33]     		inc 	hl
0153: 18F8     [45]     		jr 		print_str_hl
                        
                        ; print a nibble in A
0155:                   print_nibble:
0155: E60F     [ 7]     		and 	$0f
0157: C630     [14]     		add 	'0'
0159: FE3A     [21]     		cp 		':'
015B: 3802     [28|33]  		jr 		c, print_nibble_out
015D: C607     [35]     		add 	7
015F:                   print_nibble_out:
015F: D302     [11]     		out 	(2), a
0161: C9       [21]     		ret
                        
                        ; print a byte in A
0162:                   print_byte:
0162: F5       [11]     		push 	af
0163: 07       [15]     		rlca
0164: 07       [19]     		rlca
0165: 07       [23]     		rlca
0166: 07       [27]     		rlca
0167: CD5501   [44]     		call 	print_nibble
016A: F1       [54]     		pop 	af
016B: CD5501   [71]     		call 	print_nibble
016E: C9       [81]     		ret
                        
016F:                   print_endl:
016F: 3E0A     [ 7]     		ld 		a, $0a
0171: D302     [18]     		out 	(2), A
0173: 3E0D     [25]     		ld 		a, $0d
0175: D302     [36]     		out 	(2), A
0177: C9       [46]     		ret
                        
                        ; dump memory b bytes from address in hl
0178:                   dump:
0178:                   dump_header:
0178: CD6F01   [17]     	call 	print_endl
017B: 7C       [21]     	ld 		a, h
017C: CD6201   [38]     	call 	print_byte
017F: 7D       [42]     	ld 		a, l
0180: CD6201   [59]     	call 	print_byte
0183: 3E20     [66]     	ld 		a, ' '
0185: D302     [77]     	out 	(2), a
0187: 3E3A     [84]     	ld 		a, ':'
0189: D302     [95]     	out 	(2), a
018B: 3E20     [102]    	ld 		a, ' '
018D: D302     [113]    	out 	(2), a
                        ;
018F: 0610     [120]    	ld 		b, 16
0191:                   dump_16:
0191: 7E       [ 7]     	ld 		a, (hl)
0192: CD6201   [24]     	call 	print_byte
0195: 3E20     [31]     	ld 		a, ' '
0197: D302     [42]     	out 	(2), a
0199: 23       [48]     	inc 	hl
                        ;
019A: 10F5     [56|61]  	djnz 	dump_16
                        
019C:                   dump_exit:
019C: C9       [10]     	ret


; +++ segments +++

#CODE          = $0000 =     0,  size = $019D =   413

; +++ global symbols +++

___low_8           = $007F =   127          mon_v02.asm:51
___skip            = $008A =   138          mon_v02.asm:58
__skip1            = $008C =   140          mon_v02.asm:61
__skip2            = $00A3 =   163          mon_v02.asm:74
_end               = $019D =   413          mon_v02.asm:2 (unused)
_size              = $019D =   413          mon_v02.asm:2 (unused)
addr               = $0020 =    32          mon_v02.asm:15
default_dump       = $00AE =   174          mon_v02.asm:80
dump               = $0178 =   376          mon_v02.asm:247
dump_16            = $0191 =   401          mon_v02.asm:262
dump_exit          = $019C =   412          mon_v02.asm:271 (unused)
dump_header        = $0178 =   376          mon_v02.asm:248 (unused)
getln              = $00C0 =   192          mon_v02.asm:95
getln_bkspc        = $00F1 =   241          mon_v02.asm:125
getln_echo_proceed = $0107 =   263          mon_v02.asm:140
getln_end          = $0115 =   277          mon_v02.asm:152
getln_wait         = $00D4 =   212          mon_v02.asm:105
hex2nib            = $0116 =   278          mon_v02.asm:159
hex2nib_alnum      = $011C =   284          mon_v02.asm:163
hex2nib_alpha      = $0125 =   293          mon_v02.asm:169
hex2nib_err        = $0130 =   304          mon_v02.asm:177
hexstr_de          = $0133 =   307          mon_v02.asm:185
hexstr_de_lp       = $0136 =   310          mon_v02.asm:187
hexstr_de_rl4      = $0140 =   320          mon_v02.asm:194
lbuf               = $0026 =    38          mon_v02.asm:18
loop_dump          = $0071 =   113          mon_v02.asm:44
mon                = $0040 =    64          mon_v02.asm:21
mon_halt           = $00BF =   191          mon_v02.asm:87
print_byte         = $0162 =   354          mon_v02.asm:228
print_endl         = $016F =   367          mon_v02.asm:239
print_nibble       = $0155 =   341          mon_v02.asm:217
print_nibble_out   = $015F =   351          mon_v02.asm:223
print_str_hl       = $014D =   333          mon_v02.asm:208
read_hexstr        = $00A3 =   163          mon_v02.asm:76 (unused)
read_line          = $0048 =    72          mon_v02.asm:24
rst                = $0000 =     0          mon_v02.asm:3 (unused)
status             = $0024 =    36          mon_v02.asm:17
valu               = $0022 =    34          mon_v02.asm:16 (unused)


total time: 0.0008 sec.
no errors
