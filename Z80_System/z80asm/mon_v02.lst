                        ; --------------------------------------
                        ; zasm: assemble "mon_v02.asm"
                        ; date: 2025-09-23 16:13:44
                        ; --------------------------------------


                        ;
0000:                   	    org 	0000h
0000:                   RST_00:
0000: 310020   [10]     	    ld 		sp, $2000
0003: C34000   [20]     	    jp  	mon
                        ;
                        ;;
                        ; a  ... workspace reg.
                        ; b  ... workspace reg. dnjz counter
                        ; c  ... command
                        ; de ... address
                        ; ix ...  mon_curr_addr, curr_addr + 2 == end_addr
                        ;
                        
                        
                        ; work space
2000:                   addr	equ		$2000
2002:                   addr2	equ 	addr+2
2004:                   lbuf	equ 	addr2+2
                        
                                org     0040h
0040:                   mon:            ;entry point
0040: 110000   [10]     		ld 		de, 0
0043: ED530020 [30]     		ld 		(addr), de
0047: ED530220 [50]     		ld 		(addr2), de
004B: ED530420 [70]     		ld 		(lbuf), de
004F:                   read_line:
004F: CD0901   [17]     		call	getln
0052: 210420   [27]     		ld 		hl, lbuf
0055: 7E       [34]     		ld 		a, (hl)
0056: FE00     [41]     		cp 		$0
0058: 2834     [48|53]  		jr 		z, default_dump
                        		;
005A: FE48     [55]     		cp 		'H'
005C: CA0801   [65|65]  		jp 		z, mon_halt
                        		;
005F: FE2E     [72]     		cp 		'.'
0061: 281C     [79|84]  		jr 		z, specify_end
0063: FE3A     [86]     		cp 		':'
0065: 285B     [93|98]  		jr 		z, write_mode
                        		;
0067: 0E04     [100]    		ld 		c, 4
0069: CD7C01   [117]    		call 	hexstr_de
006C: ED530020 [137]    		ld 		(addr), de
                        		;
0070: 7E       [144]    		ld 		a, (hl)
0071: FE00     [151]    		cp 		$0
0073: 2819     [158|163]		jr 		z, default_dump
0075: FE2E     [165]    		cp		'.'
0077: 2806     [172|177]		jr 		z, specify_end
0079: FE3A     [179]    		cp		':'
007B: 2845     [186|191]		jr 		z, write_mode
007D: 186A     [198]    		jr 		error
                        		;
007F:                   specify_end:
007F: 23       [ 6]     		inc 	hl 		; next to '.'
0080: 0E04     [13]     		ld 		c, 4
0082: CD7C01   [30]     		call 	hexstr_de
0085: ED530220 [50]     		ld 		(addr2), de
0089: 7E       [57]     		ld 		a, (hl)
008A: FE00     [64]     		cp 		0
008C: 205B     [71|76]  		jr 		nz, error
                        		;
008E:                   default_dump:
008E: 2A0020   [16]     		ld 		hl, (addr)
0091: ED5B0220 [36]     		ld 		de, (addr2)
0095: 7C       [40]     		ld 		a, H
0096: BA       [44]     		cp 		d
0097: 2002     [51|56]  		jr 		nz, cp_hl_de_end
0099: 7D       [55]     		ld 		a, l
009A: BB       [59]     		cp 		e
009B:                   cp_hl_de_end:
009B: 2820     [ 7|12]  		jr 		z, do_dump; cp_equal
009D: 381E     [14|19]  		jr 		c, do_dump; cp_less
009F: 3010     [21|26]  		jr 		nc, cp_gt ; cp_greater
00A1: 3E3D     [ 7]     cp_equal:	ld 	a, '='
00A3: D302     [18]     		out 	(2), A
00A5: 1816     [30]     		jr 		do_dump
00A7: 3E3C     [ 7]     cp_less:	ld 	a, '<'
00A9: D302     [18]     		out 	(2), A
00AB: 1810     [30]     		jr 		do_dump
00AD: 3E3E     [ 7]     cp_greater:	ld 	a, '>'
00AF: D302     [18]     		out 	(2), A
00B1:                   cp_gt:
00B1: 2A0020   [16]     		ld 		hl, (addr)
00B4: 111000   [26]     		ld 		de, $10
00B7: 19       [37]     		add 	hl, de
00B8: 220220   [53]     		ld 		(addr2), hl
00BB: 1800     [65]     		jr 		do_dump
00BD:                   do_dump:
00BD: CDC701   [17]     		call 	dump
00C0: 188D     [29]     		jr 		read_line
                        ;
00C2:                   write_mode:
00C2: 23       [ 6]     		inc 	hl 		; next to ':'
00C3: 7E       [13]     		ld 		a, (hl)
00C4: FE20     [20]     		cp 		' '
00C6: 28FA     [27|32]  		jr 		z, write_mode
                        		;
00C8: 0E02     [34]     		ld 		c, 2
00CA: CD7C01   [51]     		call 	hexstr_de
00CD: 79       [55]     		ld 		a,c 
00CE: FE02     [62]     		cp 		a, 2
00D0: 2817     [69|74]  		jr 		z, error	; no arg or illegal char
00D2: CDBE01   [86]     		call 	print_endl
00D5: 7B       [90]     		ld 		a, e
00D6: CDB101   [107]    		call print_byte
00D9: DD2A0020 [127]    		ld 		ix, (addr)
00DD: DD7300   [146]    		ld 		(ix), e
00E0: DD23     [156]    		inc 	ix
00E2: DD220020 [176]    		ld 		(addr), ix
00E6: C34F00   [186]    		jp 		read_line
                        ; 
00E9:                   error:
00E9: CDB101   [17]     		call 	print_byte
00EC: 21FB00   [27]     		ld 		hl, err_msg
00EF: CD9A01   [44]     		call 	print_str_hl
00F2: 210420   [54]     		ld 		hl, lbuf
00F5: CD9A01   [71]     		call 	print_str_hl
00F8: C34F00   [81]     		jp 		read_line
                        
00FB: 0A0D              err_msg:	db $0a, $0d
00FD: 20657272          		db " error? "
0101: 6F723F20          
0105: 0A0D00            		db $0a, $0d, 0
                        
0108:                   mon_halt:
0108: 76       [ 4]     		halt
                        
                        
                        ; バッファ方式にしてるから最大4ニブルを一気に読んだ方がかんたんでは？
                        
                        
                        ; subroutines
                        
0109:                   getln:
0109: 210420   [10]     		ld 		hl, lbuf 	; buf ptr
010C: 3600     [20]     		ld 		(hl), 0
010E: 0600     [27]     		ld 		b, 0		; char count
0110: CDBE01   [44]     		call 	print_endl
0113: 3E2A     [51]     		ld 		a, '*'
0115: D302     [62]     		out 	(2), a
                        
0117:                   getln_wait:
0117: DB00     [11]     		in 		a, (0)
0119: A7       [15]     		and 	a
011A: 28FB     [22|27]  		jr 		z, getln_wait
                        ;
                        ; no echo back
011C: DB01     [33]     		in 		a, (1)
011E: FE08     [40]     		cp 		$08 	;backspace
0120: 2812     [47|52]  		jr 		z, getln_bkspc
0122: FE7F     [54]     		cp 		$7f		; del
0124: 280E     [61|66]  		jr 		z, getln_bkspc
0126: FE0A     [68]     		cp 		$0a
0128: 282E     [75|80]  		jr 		z, getln_end
012A: FE0D     [82]     		cp 		$0d
012C: 282A     [89|94]  		jr 		z, getln_end
                        ; other ctrl codes
012E: FE20     [96]     		cp 		$20
0130: 3018     [103|108]		jr 		nc, getln_echo_proceed
0132: 18E3     [115]    		jr 		getln_wait
                        
0134:                   getln_bkspc:
0134: 78       [ 4]     		ld 		a, b
0135: A7       [ 8]     		and 	a
0136: 28DF     [15|20]  		jr 		z, getln_wait
0138: 3E08     [22]     		ld 		a, $08
013A: D302     [33]     		out 	(2), a
013C: 3E20     [40]     		ld 		a, ' '
013E: D302     [51]     		out 	(2), a
0140: 3E08     [58]     		ld 		a, $08
0142: D302     [69]     		out 	(2), a
0144: 2B       [75]     		dec 	hl
0145: 3600     [85]     		ld 		(hl), $0
0147: 05       [89]     		dec 	b
0148: 18CD     [101]    		jr 		getln_wait
                        
014A:                   getln_echo_proceed:
014A: D302     [11]     		out 	(2), a 		; echo back
                        		;
014C: 77       [18]     		ld 		(hl),a		; *ptr++ = a
014D: 23       [24]     		inc 	hl
014E: 3600     [34]     		ld 		(hl), $0	; *ptr = NULL
0150: 04       [38]     		inc 	b
0151: 78       [42]     		ld 		a, b
0152: FE0F     [49]     		cp 		15
0154: 3002     [56|61]  		jr 		nc, getln_end  ; force terminate line
0156: 18BF     [68]     		jr 		getln_wait
                        
0158:                   getln_end:	; parse lbuf
0158: C9       [10]     		ret
                        
                        
                        ; convert one char expressing a hexadecimal digit 
                        ; in A reg. to nibble in A
                        ; bit 7 is set to A if A is not hex-dec char
                        ;
0159:                   hex2nib:
0159: FE30     [ 7]     		cp 		'0'
015B: 381C     [14|19]  		jr 		c, hex2nib.err
015D: FE3A     [21]     		cp 		'9' + 1
015F: 3003     [28|33]  		jr 		nc, hex2nib.toupper
0161: D630     [35]     		sub 	'0'
0163: C9       [45]     		ret
                        		;
0164:                   hex2nib.toupper:
0164: FE61     [ 7]     		cp 		'a'
0166: 3806     [14|19]  		jr	 	c, hex2nib.alpha
0168: FE67     [21]     		cp 		'f' + 1
016A: 3002     [28|33]  		jr	 	nc, hex2nib.alpha
016C: E6DF     [35]     		and 	$df
016E:                   hex2nib.alpha:
016E: FE41     [ 7]     		cp     'A' 
0170: 3807     [14|19]  		jr      c, hex2nib.err  
0172: FE47     [21]     		cp      'F' + 1 
0174: 3003     [28|33]  		jr      nc, hex2nib.err      ; error if it is larger than 'F'
0176: D637     [35]     		sub 	'A' - 10
0178: C9       [45]     		ret
                        		;
0179:                   hex2nib.err:
0179: 3EFF     [ 7]     		ld 		a, $ff 	; error code
017B: C9       [17]     		ret
                        
                        
                        ; read hexadecimal string char upto 2 or 4 (set in C) 
                        ; bytes from (HL) and return int val in DE
                        ; if non hexdec char is encountered at (HL), returns with current de value without inc hl.
                        ; if C upper-limit bytes has been read, returns with current de value with increment hl.
                        ; A reg. hold the last char read from (HL).
                        ;
017C:                   hexstr_de:
017C: 110000   [10]         ld      de, 0000h
017F:                   hexstr_de_lp:
017F: 7E       [ 7]         ld      a, (hl)
0180: 47       [11]     	ld 		b, a
0181: CD5901   [28]     	call 	hex2nib
0184: FEFF     [35]     	cp 		$ff
0186: 2002     [42|47]  	jr 		nz, hexstr_de.hex2nib_succ
0188: 78       [46]     	ld 		a, b 	; recover original value of A
0189: C9       [56]     	ret 	 		; encountered non-hexdec char.
018A:                   hexstr_de.hex2nib_succ:
018A: A7       [ 4]     	and 	a		; clear Carry bit
018B: 0604     [11]     	ld 		b, 4
018D:                   hexstr_de_rl4:
018D: CB13     [ 8]         rl      e		 ;rotate left entire de
018F: CB12     [16]         rl      d
0191: 10FA     [24|29]      djnz    hexstr_de_rl4
0193: 83       [28]     	add 	e
0194: 5F       [32]     	ld 		e, a
0195: 23       [38]     	inc 	hl 		; 
0196: 0D       [42]     	dec 	c
0197: 20E6     [49|54]      jr      nz, hexstr_de_lp
0199: C9       [59]     	ret 			; return after c bytes read
                        
                        
                        ;
                        ;
019A:                   print_str_hl:
019A: 7E       [ 7]     		ld 		a,(hl)
019B: A7       [11]     		and 	A
019C: C8       [16|22]  		ret 	z
019D: D302     [27]     		out 	(2), a
019F: 23       [33]     		inc 	hl
01A0: 18F8     [45]     		jr 		print_str_hl
                        
                        ; print a nibble in A
01A2:                   print_nibble:
01A2: E60F     [ 7]     		and 	$0f
01A4: FE0A     [14]     		cp 		$a
01A6: C630     [21]     		add 	'0'
01A8: FE3A     [28]     		cp 		':'
01AA: 3802     [35|40]  		jr 		c, print_nibble_out
01AC: C607     [42]     		add 	7
01AE:                   print_nibble_out:
01AE: D302     [11]     		out 	(2), a
01B0: C9       [21]     		ret
                        
                        ; print a byte in A
01B1:                   print_byte:
01B1: F5       [11]     		push 	af
01B2: 07       [15]     		rlca
01B3: 07       [19]     		rlca
01B4: 07       [23]     		rlca
01B5: 07       [27]     		rlca
01B6: CDA201   [44]     		call 	print_nibble
01B9: F1       [54]     		pop 	af
01BA: CDA201   [71]     		call 	print_nibble
01BD: C9       [81]     		ret
                        
01BE:                   print_endl:
01BE: 3E0A     [ 7]     		ld 		a, $0a
01C0: D302     [18]     		out 	(2), A
01C2: 3E0D     [25]     		ld 		a, $0d
01C4: D302     [36]     		out 	(2), A
01C6: C9       [46]     		ret
                        
                        ; dump memory from addr to addr+2 (value)
                        ;
01C7:                   dump:
01C7: 2A0020   [16]     	ld 		hl, (addr)
01CA: ED5B0220 [36]     	ld 		de, (addr2)
01CE:                   dump_header:
01CE: CDBE01   [17]     	call 	print_endl
01D1: 7C       [21]     	ld 		a, h
01D2: CDB101   [38]     	call 	print_byte
01D5: 7D       [42]     	ld 		a, l
01D6: CDB101   [59]     	call 	print_byte
01D9: 3E20     [66]     	ld 		a, ' '
01DB: D302     [77]     	out 	(2), a
01DD: 3E3A     [84]     	ld 		a, ':'
01DF: D302     [95]     	out 	(2), a
01E1: 3E20     [102]    	ld 		a, ' '
01E3: D302     [113]    	out 	(2), a
                        ;
01E5: 0610     [120]    	ld 		b, 16 	; up to 16 bytes
01E7:                   dump_16:
01E7: 7E       [ 7]     	ld 		a, (hl)
01E8: 23       [13]     	inc 	hl
01E9: 220020   [29]     	ld 		(addr), hl
01EC: CDB101   [46]     	call 	print_byte
01EF: 3E20     [53]     	ld 		a, ' '
01F1: D302     [64]     	out 	(2), a
01F3:                   cp_de_hl:
01F3: 7A       [ 4]     	ld 		a, d
01F4: BC       [ 8]     	cp 		h
01F5: 2002     [15|20]  	jr 		nz, cp_de_hl.comp_end
01F7: 7B       [19]     	ld 		a, e
01F8: BD       [23]     	cp 		l
01F9:                   cp_de_hl.comp_end:
01F9: 2806     [ 7|12]  	jr 		z, dump_exit
01FB: 3804     [14|19]  	jr 		c, dump_exit
                        ;
01FD: 10E8     [22|27]  	djnz 	dump_16
01FF: 18CD     [34]     	jr 		dump_header
                        
0201:                   dump_exit:
                        	;call 	print_endl
0201: 110000   [10]     	ld 		de, 0
0204: ED530220 [30]     	ld 		(addr2), de
0208: C9       [40]     	ret


; +++ segments +++

#CODE          = $0000 =     0,  size = $0209 =   521

; +++ global symbols +++

RST_00            = $0000 =     0          mon_v02.asm:3 (unused)
_end              = $0209 =   521          mon_v02.asm:2 (unused)
_size             = $0209 =   521          mon_v02.asm:2 (unused)
addr              = $2000 =  8192          mon_v02.asm:17
addr2             = $2002 =  8194          mon_v02.asm:18
cp_de_hl          = $01F3 =   499          mon_v02.asm:323 (unused)
cp_de_hl.comp_end = $01F9 =   505          mon_v02.asm:329
cp_equal          = $00A1 =   161          mon_v02.asm:76 (unused)
cp_greater        = $00AD =   173          mon_v02.asm:82 (unused)
cp_gt             = $00B1 =   177          mon_v02.asm:84
cp_hl_de_end      = $009B =   155          mon_v02.asm:72
cp_less           = $00A7 =   167          mon_v02.asm:79 (unused)
default_dump      = $008E =   142          mon_v02.asm:64
do_dump           = $00BD =   189          mon_v02.asm:90
dump              = $01C7 =   455          mon_v02.asm:299
dump_16           = $01E7 =   487          mon_v02.asm:316
dump_exit         = $0201 =   513          mon_v02.asm:336
dump_header       = $01CE =   462          mon_v02.asm:302
err_msg           = $00FB =   251          mon_v02.asm:122
error             = $00E9 =   233          mon_v02.asm:114
getln             = $0109 =   265          mon_v02.asm:135
getln_bkspc       = $0134 =   308          mon_v02.asm:163
getln_echo_proceed = $014A =   330          mon_v02.asm:178
getln_end         = $0158 =   344          mon_v02.asm:190
getln_wait        = $0117 =   279          mon_v02.asm:143
hex2nib           = $0159 =   345          mon_v02.asm:198
hex2nib.alpha     = $016E =   366          mon_v02.asm:212
hex2nib.err       = $0179 =   377          mon_v02.asm:220
hex2nib.toupper   = $0164 =   356          mon_v02.asm:206
hexstr_de         = $017C =   380          mon_v02.asm:231
hexstr_de.hex2nib_succ = $018A =   394          mon_v02.asm:241
hexstr_de_lp      = $017F =   383          mon_v02.asm:233
hexstr_de_rl4     = $018D =   397          mon_v02.asm:244
lbuf              = $2004 =  8196          mon_v02.asm:19
mon               = $0040 =    64          mon_v02.asm:22
mon_halt          = $0108 =   264          mon_v02.asm:126
print_byte        = $01B1 =   433          mon_v02.asm:279
print_endl        = $01BE =   446          mon_v02.asm:290
print_nibble      = $01A2 =   418          mon_v02.asm:267
print_nibble_out  = $01AE =   430          mon_v02.asm:274
print_str_hl      = $019A =   410          mon_v02.asm:258
read_line         = $004F =    79          mon_v02.asm:27
specify_end       = $007F =   127          mon_v02.asm:55
write_mode        = $00C2 =   194          mon_v02.asm:94


total time: 0.0013 sec.
no errors
