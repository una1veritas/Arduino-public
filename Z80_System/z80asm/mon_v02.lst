                        ; --------------------------------------
                        ; zasm: assemble "mon_v02.asm"
                        ; date: 2025-09-17 23:22:36
                        ; --------------------------------------


                        ;
0000:                   	    org 	0000h
0000:                   rst:
0000: 310008   [10]     	    ld 		sp, 0800h
0003: C34000   [20]     	    jp  	mon
                        ;
                        ;;
                        ; a  ... workspace reg.
                        ; b  ... workspace reg. dnjz counter
                        ; c  ... command
                        ; de ... address
                        ; ix ...  mon_curr_addr, curr_addr + 2 == end_addr
                        ;
                        		org 	0020h
0020: 0000              addr:	dw		$0
0022: 0000              valu:	dw 		$0
0024: 0000              status:	db 		0, 0
0026: 00000000          lbuf:	ds 		20, 0
002A: 00...             
                        
                                org     0040h
0040:                   mon:            ;entry point
0040: DD212000 [14]     		ld 		ix, addr
0044: FD212400 [28]     		ld 		iy, status
0048:                   read_line:
0048: CD5900   [17]     		call	getln
004B: CDE900   [34]     		call 	print_endl
004E: 212600   [44]     		ld 		hl, lbuf
0051: CDC700   [61]     		call 	print_str_hl
0054: CDE900   [78]     		call 	print_endl
0057: 18EF     [90]     		jr 		read_line
                        ; バッファ方式にしてるから最大4ニブルを一気に読んだ方がかんたんでは？
                        
                        
                        ; subroutines
                        
0059:                   getln:
0059: 212600   [10]     		ld 		hl, lbuf 	; buf ptr
005C: 3600     [20]     		ld 		(hl), 0
005E: 0600     [27]     		ld 		b, 0		; char count
0060: DD5E00   [46]     		ld 		de, (ix)
0063: DD5601   [65]     
                        
0066: CDE900   [82]     		call 	print_endl
0069: 3E2A     [89]     		ld 		a, '*'
006B: D302     [100]    		out 	(2), a
                        
006D:                   getln_wait:
006D: DB00     [11]     		in 		a, (0)
006F: A7       [15]     		and 	a
0070: 28FB     [22|27]  		jr 		z, getln_wait
                        ;
                        ; no echo back
0072: DB01     [33]     		in 		a, (1)
0074: FE08     [40]     		cp 		$08 	;backspace
0076: 2812     [47|52]  		jr 		z, getln_bkspc
0078: FE7F     [54]     		cp 		$7f		; del
007A: 280E     [61|66]  		jr 		z, getln_bkspc
007C: FE0A     [68]     		cp 		$0a
007E: 2829     [75|80]  		jr 		z, getln_end
0080: FE0D     [82]     		cp 		$0d
0082: 2825     [89|94]  		jr 		z, getln_end
                        ; other ctrl codes
0084: FE20     [96]     		cp 		$20
0086: 3018     [103|108]		jr 		nc, getln_echo_proceed
0088: 18E3     [115]    		jr 		getln_wait
                        
008A:                   getln_bkspc:
008A: 78       [ 4]     		ld 		a, b
008B: A7       [ 8]     		and 	a
008C: 28DF     [15|20]  		jr 		z, getln_wait
008E: 3E08     [22]     		ld 		a, $08
0090: D302     [33]     		out 	(2), a
0092: 3E20     [40]     		ld 		a, ' '
0094: D302     [51]     		out 	(2), a
0096: 3E08     [58]     		ld 		a, $08
0098: D302     [69]     		out 	(2), a
009A: 2B       [75]     		dec 	hl
009B: 3600     [85]     		ld 		(hl), $0
009D: 05       [89]     		dec 	b
009E: 18CD     [101]    		jr 		getln_wait
                        
00A0:                   getln_echo_proceed:
00A0: D302     [11]     		out 	(2), a 		; echo back
                        		;
00A2: 77       [18]     		ld 		(hl),a		; *ptr++ = a
00A3: 23       [24]     		inc 	hl
00A4: 3600     [34]     		ld 		(hl), $0	; *ptr = NULL
00A6: 04       [38]     		inc 	b
                        ;		ld 		a, b
                        ;		cp 		30
                        ;		jr 		nc, getln_end  ; force terminate line
00A7: 18C4     [50]     		jr 		getln_wait
                        
00A9:                   getln_end:	; parse lbuf
00A9: C9       [10]     		ret
                        
                        ; convert one char expressing a hexadecimal digit 
                        ; in A reg. to nibble in A
                        ;
00AA:                   hex2nib:
00AA: FE61     [ 7]     		cp      'a'     ; check whether a lower case
00AC: 3802     [14|19]  		jr      c, hex2nib_alnum  ; a digit or an upper case if carry set
00AE: E6DF     [21]     		and     $df     ; lower case to upper case
00B0:                   hex2nib_alnum:
00B0: FE3A     [ 7]     		cp      '9' + 1 ; check whether a digit
00B2: 3005     [14|19]  		jr      nc, hex2nib_alpha  ; possibly an upper case letter if carry not set
00B4: D630     [21]     		sub     a, '0'  ; digit to int value
00B6: 380C     [28|33]  		jr      c, hex2nib_err     ; it was not '0' - '9' 
00B8: C9       [38]     		ret
00B9:                   hex2nib_alpha:
00B9: FE47     [ 7]     		cp      'F'+1   ; check the digit whether less than 'F'
00BB: 3007     [14|19]  		jr      nc, hex2nib_err      ; error if it is larger than 'F'
00BD: D641     [21]     		sub     'A'  	; A - F to integer 0 - 5
00BF: 3803     [28|33]  		jr      c, hex2nib_err       ; it was not 'A' - 'F'
00C1: C60A     [35]     		add     a, 10   ; A - F to 10 - 15 by +5
00C3: C9       [45]     		ret
                        
00C4:                   hex2nib_err:
00C4: F6FF     [ 7]     		or 		$ff
00C6: C9       [17]     		ret
                        
                        ;
                        ;
00C7:                   print_str_hl:
00C7: 7E       [ 7]     		ld 		a,(hl)
00C8: A7       [11]     		and 	A
00C9: C8       [16|22]  		ret 	z
00CA: D302     [27]     		out 	(2), a
00CC: 23       [33]     		inc 	hl
00CD: 18F8     [45]     		jr 		print_str_hl
                        
                        ; print a nibble in A
00CF:                   print_nibble:
00CF: E60F     [ 7]     		and 	$0f
00D1: C630     [14]     		add 	'0'
00D3: FE3A     [21]     		cp 		':'
00D5: 3802     [28|33]  		jr 		c, print_nibble_out
00D7: C607     [35]     		add 	7
00D9:                   print_nibble_out:
00D9: D302     [11]     		out 	(2), a
00DB: C9       [21]     		ret
                        
                        ; print a byte in A
00DC:                   print_byte:
00DC: F5       [11]     		push 	af
00DD: 07       [15]     		rlca
00DE: 07       [19]     		rlca
00DF: 07       [23]     		rlca
00E0: 07       [27]     		rlca
00E1: CDCF00   [44]     		call 	print_nibble
00E4: F1       [54]     		pop 	af
00E5: CDCF00   [71]     		call 	print_nibble
00E8: C9       [81]     		ret
                        
00E9:                   print_endl:
00E9: 3E0A     [ 7]     		ld 		a, $0a
00EB: D302     [18]     		out 	(2), A
00ED: 3E0D     [25]     		ld 		a, $0d
00EF: D302     [36]     		out 	(2), A
00F1: C9       [46]     		ret
                        
                        ; dump memory b bytes from address in hl
00F2:                   dump:
00F2:                   dump_header:
00F2: CDE900   [17]     	call 	print_endl
00F5: 7C       [21]     	ld 		a, h
00F6: CDDC00   [38]     	call 	print_byte
00F9: 7D       [42]     	ld 		a, l
00FA: CDDC00   [59]     	call 	print_byte
00FD: 3E20     [66]     	ld 		a, ' '
00FF: D302     [77]     	out 	(2), a
0101: 3E3A     [84]     	ld 		a, ':'
0103: D302     [95]     	out 	(2), a
0105: 3E20     [102]    	ld 		a, ' '
0107: D302     [113]    	out 	(2), a
                        ;
0109: 0610     [120]    	ld 		b, 16
010B:                   dump_16:
010B: 7E       [ 7]     	ld 		a, (hl)
010C: CDDC00   [24]     	call 	print_byte
010F: 3E20     [31]     	ld 		a, ' '
0111: D302     [42]     	out 	(2), a
0113: 23       [48]     	inc 	hl
                        ;
0114: 10F5     [56|61]  	djnz 	dump_16
                        ;	jr 		dump_header
                        
0116:                   dump_exit:
0116: C9       [10]     	ret


; +++ segments +++

#CODE          = $0000 =     0,  size = $0117 =   279

; +++ global symbols +++

_end               = $0117 =   279          mon_v02.asm:2 (unused)
_size              = $0117 =   279          mon_v02.asm:2 (unused)
addr               = $0020 =    32          mon_v02.asm:15
dump               = $00F2 =   242          mon_v02.asm:162 (unused)
dump_16            = $010B =   267          mon_v02.asm:177
dump_exit          = $0116 =   278          mon_v02.asm:187 (unused)
dump_header        = $00F2 =   242          mon_v02.asm:163 (unused)
getln              = $0059 =    89          mon_v02.asm:36
getln_bkspc        = $008A =   138          mon_v02.asm:66
getln_echo_proceed = $00A0 =   160          mon_v02.asm:81
getln_end          = $00A9 =   169          mon_v02.asm:93
getln_wait         = $006D =   109          mon_v02.asm:46
hex2nib            = $00AA =   170          mon_v02.asm:99 (unused)
hex2nib_alnum      = $00B0 =   176          mon_v02.asm:103
hex2nib_alpha      = $00B9 =   185          mon_v02.asm:109
hex2nib_err        = $00C4 =   196          mon_v02.asm:117
lbuf               = $0026 =    38          mon_v02.asm:18
mon                = $0040 =    64          mon_v02.asm:21
print_byte         = $00DC =   220          mon_v02.asm:143
print_endl         = $00E9 =   233          mon_v02.asm:154
print_nibble       = $00CF =   207          mon_v02.asm:132
print_nibble_out   = $00D9 =   217          mon_v02.asm:138
print_str_hl       = $00C7 =   199          mon_v02.asm:123
read_line          = $0048 =    72          mon_v02.asm:24
rst                = $0000 =     0          mon_v02.asm:3 (unused)
status             = $0024 =    36          mon_v02.asm:17
valu               = $0022 =    34          mon_v02.asm:16 (unused)


total time: 0.0011 sec.
no errors
