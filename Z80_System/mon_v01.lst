                        ; --------------------------------------
                        ; zasm: assemble "mon_v01.asm"
                        ; date: 2025-09-15 01:27:47
                        ; --------------------------------------


                        ;
0000:                   	org 	0000h
0000:                   rst:
0000: 310002   [10]     	ld 		sp, 0200h
0003: C31000   [20]     	jp  	monitor
                        ;
                        ;;
                        ; a  ... working reg.
                        ; b  ... dnjz counter
                        ; c  ... command
                        ; de ... address
                        ;
                        	org 	0010h
0010:                   monitor:
0010: 0E00     [ 7]     	ld      c, 0
0012: DD21D100 [21]     	ld 		ix, mon_curr_addr
0016: DD5E00   [40]         ld      de, (ix)
0019: DD5601   [59]     
001C:                   monitor_main:
001C: CDAA00   [17]     	call 	print_endl
001F: 3E2A     [24]     	ld 		a, '*'
0021: D302     [35]     	out 	(2), a
0023: 3E20     [42]     	ld 		a, ' '
0025: D302     [53]     	out 	(2), a
0027:                   next_char:
0027: CD6B00   [17]     	call 	getchar
002A: FE0D     [24]     	cp 		$0d
002C: 28F9     [31|36]  	jr 		z, next_char
002E: FE0A     [38]     	cp 		$0a
0030: 281B     [45|50]  	jr 		z, exec_cmd
0032:                   echo_back:
0032: D302     [11]     	out 	(2), a 		; echo back (including cr)
0034: FE48     [18]         cp      'H'
0036: 2814     [25|30]      jr      z, mon_halt
                        
0038: CD7300   [42]     	call 	hex2nibble
003B: FEFF     [49]     	cp 		a, $ff
003D: 28E8     [56|61]  	jr 		z, next_char 	; delimiter or other error char
003F: 0604     [63]     	ld 		b, 4
0041:                   _rl_4
0041: A7       [ 4]     	and 	a		; clr carry
0042: CB13     [12]     	rl		e
0044: CB12     [20]     	rl 		d
0046: 10F9     [28|33]  	djnz 	_rl_4
0048: 83       [32]     	add 	e
0049: 5F       [36]     	ld 		e, a
004A: 18DB     [48]         jr  	next_char
                        
004C:                   mon_halt
004C: 76       [ 4]         halt
                        
004D:                   exec_cmd:
004D: CDAA00   [17]     	call 	print_endl
0050: DD21D100 [31]     	ld 		ix, mon_curr_addr
0054: DD7300   [50]     	ld 		(ix), de
0057: DD7201   [69]     
005A: DD6E00   [88]     	ld 		hl, (ix)
005D: DD6601   [107]    
0060: CDAF00   [124]    	call 	dump
0063: DD7500   [143]    	ld 		(ix), hl
0066: DD7401   [162]    
0069: 18A5     [174]    	jr 		monitor
                        
                        
                        
                        ; read one character from con in 
                        ; returns ascii code in A reg.
006B:                   getchar:
006B: DB00     [11]     	in 		a, (0)
006D: A7       [15]     	and 	a 
006E: 28FB     [22|27]  	jr 		z, getchar
0070: DB01     [33]     	in 		a, (1)
0072: C9       [43]     	ret
                        
                        
                        ; convert one char expressing a hexadecimal digit 
                        ; in A reg. to nibble in A
                        ;
0073:                   hex2nibble:
0073: FE61     [ 7]         cp      'a'     ; check whether a lower case
0075: 3802     [14|19]      jr      c, hex2nibble_digit_or_upper  ; a digit or an upper case if carry set
0077: E6DF     [21]         and     $df     ; lower case to upper case
0079:                   hex2nibble_digit_or_upper:
0079: FE3A     [ 7]         cp      '9' + 1 ; check whether a digit
007B: 3005     [14|19]      jr      nc, hex2nibble_upper  ; possibly an upper case letter if carry not set
007D: D630     [21]         sub     a, '0'  ; digit to int value
007F: 380C     [28|33]      jr      c, hex2nibble_err     ; it was not '0' - '9' 
0081: C9       [38]         ret
0082:                   hex2nibble_upper:
0082: FE47     [ 7]         cp      'F'+1   ; check the digit whether less than 'F'
0084: 3007     [14|19]      jr      nc, hex2nibble_err      ; error if it is larger than 'F'
0086: D641     [21]         sub     'A'  	; A - F to integer 0 - 5
0088: 3803     [28|33]      jr      c, hex2nibble_err       ; it was not 'A' - 'F'
008A: C60A     [35]         add     a, 10   ; A - F to 10 - 15 by +5
008C:                   hex2nibble_output:
008C: C9       [10]         ret
                        
008D:                   hex2nibble_err:
008D: 3EFF     [ 7]     	ld 		a, 0xff
008F: C9       [17]     	ret
                        
                        
                        ; print a nibble in A
0090:                   print_nibble_hex:
0090: E60F     [ 7]     	and 	$0f
0092: C630     [14]     	add 	'0'
0094: FE3A     [21]     	cp 		':'
0096: 3802     [28|33]  	jr 		c, print_nibble_hex_out
0098: C607     [35]     	add 	7
009A:                   print_nibble_hex_out:
009A: D302     [11]     	out 	(2), a
009C: C9       [21]     	ret
                        
                        ; print a byte in A
009D:                   print_byte_hex:
009D: F5       [11]     	push 	af
009E: 07       [15]     	rlca
009F: 07       [19]     	rlca
00A0: 07       [23]     	rlca
00A1: 07       [27]     	rlca
00A2: CD9000   [44]     	call 	print_nibble_hex
00A5: F1       [54]     	pop 	af
00A6: CD9000   [71]     	call 	print_nibble_hex
00A9: C9       [81]     	ret
                        
00AA:                   print_endl:
00AA: 3E0A     [ 7]     	ld 	a, $0a
00AC: D302     [18]     	out 	(2), A
                        	;ld 		a, $0d
                        	;out 	(2), A
00AE: C9       [28]     	ret
                        
                        ; dump memory b bytes from address stored in addrptr
00AF:                   dump:
00AF: 7C       [ 4]     	ld 		a, h
00B0: CD9D00   [21]     	call 	print_byte_hex
00B3: 7D       [25]     	ld 		a, l
00B4: CD9D00   [42]     	call 	print_byte_hex
00B7: 3E20     [49]     	ld 		a, ' '
00B9: D302     [60]     	out 	(2), a
00BB: 3E3A     [67]     	ld 		a, ':'
00BD: D302     [78]     	out 	(2), a
00BF: 3E20     [85]     	ld 		a, ' '
00C1: D302     [96]     	out 	(2), a
00C3: 0610     [103]    	ld 		b, 16
00C5:                   dump_16:
00C5: 7E       [ 7]     	ld 		a, (hl)
00C6: CD9D00   [24]     	call 	print_byte_hex
00C9: 3E20     [31]     	ld 		a, ' '
00CB: D302     [42]     	out 	(2), a
00CD: 23       [48]     	inc 	hl
00CE: 10F5     [56|61]  	djnz 	dump_16
00D0:                   dump_exit:
                        	; call 	print_endl;
00D0: C9       [10]     	ret
                        
00D1:                   mon_curr_addr:
00D1: 0000              	dw		0000h


; +++ segments +++

#CODE          = $0000 =     0,  size = $00D3 =   211

; +++ global symbols +++

_end                 = $00D3 =   211          mon_v01.asm:2 (unused)
_rl_4                = $0041 =    65          mon_v01.asm:39
_size                = $00D3 =   211          mon_v01.asm:2 (unused)
dump                 = $00AF =   175          mon_v01.asm:130
dump_16              = $00C5 =   197          mon_v01.asm:142
dump_exit            = $00D0 =   208          mon_v01.asm:149 (unused)
echo_back            = $0032 =    50          mon_v01.asm:30 (unused)
exec_cmd             = $004D =    77          mon_v01.asm:51
getchar              = $006B =   107          mon_v01.asm:64
hex2nibble           = $0073 =   115          mon_v01.asm:75
hex2nibble_digit_or_upper = $0079 =   121          mon_v01.asm:79
hex2nibble_err       = $008D =   141          mon_v01.asm:94
hex2nibble_output    = $008C =   140          mon_v01.asm:91 (unused)
hex2nibble_upper     = $0082 =   130          mon_v01.asm:85
mon_curr_addr        = $00D1 =   209          mon_v01.asm:153
mon_halt             = $004C =    76          mon_v01.asm:48
monitor              = $0010 =    16          mon_v01.asm:14
monitor_main         = $001C =    28          mon_v01.asm:18 (unused)
next_char            = $0027 =    39          mon_v01.asm:24
print_byte_hex       = $009D =   157          mon_v01.asm:111
print_endl           = $00AA =   170          mon_v01.asm:122
print_nibble_hex     = $0090 =   144          mon_v01.asm:100
print_nibble_hex_out = $009A =   154          mon_v01.asm:106
rst                  = $0000 =     0          mon_v01.asm:3 (unused)


total time: 0.0012 sec.
no errors
