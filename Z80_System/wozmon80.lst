                        ; --------------------------------------
                        ; zasm: assemble "wozmon80.asm"
                        ; date: 2025-09-11 20:56:12
                        ; --------------------------------------


                        ;  The WOZ Monitor for the Apple 1
                        ;  Written by Steve Wozniak in 1976
                        
                        
                        ; Page 0 Variables
                        
                        XAML            = $24           ;  Last "opened" location Low
                        XAMH            = $25           ;  Last "opened" location High
                        STL             = $26           ;  Store address Low
                        STH             = $27           ;  Store address High
                        L               = $28           ;  Hex value parsing Low
                        H               = $29           ;  Hex value parsing High
                        YSAV            = $2A           ;  Used to see if hex value is given
                        MODE            = $2B           ;  $00=XAM, $7F=STOR, $AE=BLOCK XAM
                        
                        
                        ; Other Variables
                        
                        IN              = $0200         ;  Input buffer to $027F
                        KBD             = $D010         ;  PIA.A keyboard input
                        KBDCR           = $D011         ;  PIA.A keyboard control register
                        DSP             = $D012         ;  PIA.B display output register
                        DSPCR           = $D013         ;  PIA.B display control register
                        
FF00:                                  .org $FF00
                                       .export RESET
***ERROR***                                   ^ unknown instruction
                        
FF00:                   RESET:          CLD             ; Clear decimal arithmetic mode.
***ERROR***                                ^ unknown instruction
                                        CLI
***ERROR***                                ^ unknown instruction
                                        LDY #$7F        ; Mask for DSP data direction register.
***ERROR***                                ^ unknown instruction
                                        STY DSP         ; Set it up.
***ERROR***                                ^ unknown instruction
                                        LDA #$A7        ; KBD and DSP control register mask.
***ERROR***                                ^ unknown instruction
                                        STA KBDCR       ; Enable interrupts, set CA1, CB1, for
***ERROR***                                ^ unknown instruction
                                        STA DSPCR       ;  positive edge sense/output mode.
***ERROR***                                ^ unknown instruction
FF00:                   NOTCR:          CMP #'_'+$80    ; "_"?
***ERROR***                                ^ unknown instruction
                                        BEQ BACKSPACE   ; Yes.
***ERROR***                                ^ unknown instruction
                                        CMP #$9B        ; ESC?
***ERROR***                                ^ unknown instruction
                                        BEQ ESCAPE      ; Yes.
***ERROR***                                ^ unknown instruction
                                        INY             ; Advance text index.
***ERROR***                                ^ unknown instruction
                                        BPL NEXTCHAR    ; Auto ESC if > 127.
***ERROR***                                ^ unknown instruction
FF00:                   ESCAPE:         LDA #'\'+$80    ; "\".
***ERROR***                                ^ unknown instruction
                                        JSR ECHO        ; Output it.
***ERROR***                                ^ unknown instruction
FF00:                   GETLINE:        LDA #$8D        ; CR.
***ERROR***                                ^ unknown instruction
                                        JSR ECHO        ; Output it.
***ERROR***                                ^ unknown instruction
                                        LDY #$01        ; Initialize text index.
***ERROR***                                ^ unknown instruction
FF00:                   BACKSPACE:      DEY             ; Back up text index.
***ERROR***                                ^ unknown instruction
                                        BMI GETLINE     ; Beyond start of line, reinitialize.
***ERROR***                                ^ unknown instruction
FF00:                   NEXTCHAR:       LDA KBDCR       ; Key ready?
***ERROR***                                ^ unknown instruction
                                        BPL NEXTCHAR    ; Loop until ready.
***ERROR***                                ^ unknown instruction
                                        LDA KBD         ; Load character. B7 should be ‘1’.
***ERROR***                                ^ unknown instruction
                                        STA IN,Y        ; Add to text buffer.
***ERROR***                                ^ unknown instruction
                                        JSR ECHO        ; Display character.
***ERROR***                                ^ unknown instruction
                                        CMP #$8D        ; CR?
***ERROR***                                ^ unknown instruction
                                        BNE NOTCR       ; No.
***ERROR***                                ^ unknown instruction
                                        LDY #$FF        ; Reset text index.
***ERROR***                                ^ unknown instruction
                                        LDA #$00        ; For XAM mode.
***ERROR***                                ^ unknown instruction
                                        TAX             ; 0->X.
                        SETSTOR:        ASL             ; Leaves $7B if setting STOR mode.
                        SETMODE:        STA MODE        ; $00=XAM, $7B=STOR, $AE=BLOCK XAM.
                        BLSKIP:         INY             ; Advance text index.
                        NEXTITEM:       LDA IN,Y        ; Get character.
                                        CMP #$8D        ; CR?
                                        BEQ GETLINE     ; Yes, done this line.
                                        CMP #'.'+$80    ; "."?
                                        BCC BLSKIP      ; Skip delimiter.
                                        BEQ SETMODE     ; Set BLOCK XAM mode.
                                        CMP #':'+$80    ; ":"?
                                        BEQ SETSTOR     ; Yes. Set STOR mode.
                                        CMP #'R'+$80    ; "R"?
                                        BEQ RUN         ; Yes. Run user program.
                                        STX L           ; $00->L.
                                        STX H           ;  and H.
                                        STY YSAV        ; Save Y for comparison.
                        NEXTHEX:        LDA IN,Y        ; Get character for hex test.
                                        EOR #$B0        ; Map digits to $0-9.
                                        CMP #$0A        ; Digit?
                                        BCC DIG         ; Yes.
                                        ADC #$88        ; Map letter "A"-"F" to $FA-FF.
                                        CMP #$FA        ; Hex letter?
                                        BCC NOTHEX      ; No, character not hex.
                        DIG:            ASL
                                        ASL             ; Hex digit to MSD of A.
                                        ASL
                                        ASL
                                        LDX #$04        ; Shift count.
                        HEXSHIFT:       ASL             ; Hex digit left, MSB to carry.
                                        ROL L           ; Rotate into LSD.
                                        ROL H           ; Rotate into MSD’s.
                                        DEX             ; Done 4 shifts?
                                        BNE HEXSHIFT    ; No, loop.
                                        INY             ; Advance text index.
                                        BNE NEXTHEX     ; Always taken. Check next character for hex.
                        NOTHEX:         CPY YSAV        ; Check if L, H empty (no hex digits).
                                        BEQ ESCAPE      ; Yes, generate ESC sequence.
                                        BIT MODE        ; Test MODE byte.
                                        BVC NOTSTOR     ; B6=0 STOR, 1 for XAM and BLOCK XAM
                                        LDA L           ; LSD’s of hex data.
                                        STA (STL,X)     ; Store at current ‘store index’.
                                        INC STL         ; Increment store index.
                                        BNE NEXTITEM    ; Get next item. (no carry).
                                        INC STH         ; Add carry to ‘store index’ high order.
                        TONEXTITEM:     JMP NEXTITEM    ; Get next command item.
                        RUN:            JMP (XAML)      ; Run at current XAM index.
                        NOTSTOR:        BMI XAMNEXT     ; B7=0 for XAM, 1 for BLOCK XAM.
                                        LDX #$02        ; Byte count.
                        SETADR:         LDA L-1,X       ; Copy hex data to
                                        STA STL-1,X     ;  ‘store index’.
                                        STA XAML-1,X    ; And to ‘XAM index’.
                                        DEX             ; Next of 2 bytes.
                                        BNE SETADR      ; Loop unless X=0.
                        NXTPRNT:        BNE PRDATA      ; NE means no address to print.
                                        LDA #$8D        ; CR.
                                        JSR ECHO        ; Output it.
                                        LDA XAMH        ; ‘Examine index’ high-order byte.
                                        JSR PRBYTE      ; Output it in hex format.
                                        LDA XAML        ; Low-order ‘examine index’ byte.
                                        JSR PRBYTE      ; Output it in hex format.
                                        LDA #':'+$80    ; ":".
                                        JSR ECHO        ; Output it.
                        PRDATA:         LDA #$A0        ; Blank.
                                        JSR ECHO        ; Output it.
                                        LDA (XAML,X)    ; Get data byte at ‘examine index’.
                                        JSR PRBYTE      ; Output it in hex format.
                        XAMNEXT:        STX MODE        ; 0->MODE (XAM mode).
                                        LDA XAML
                                        CMP L           ; Compare ‘examine index’ to hex data.
                                        LDA XAMH
                                        SBC H
                                        BCS TONEXTITEM  ; Not less, so no more data to output.
                                        INC XAML
                                        BNE MOD8CHK     ; Increment ‘examine index’.
                                        INC XAMH
                        MOD8CHK:        LDA XAML        ; Check low-order ‘examine index’ byte
                                        AND #$07        ;  For MOD 8=0
                                        BPL NXTPRNT     ; Always taken.
                        PRBYTE:         PHA             ; Save A for LSD.
                                        LSR
                                        LSR
                                        LSR             ; MSD to LSD position.
                                        LSR
                                        JSR PRHEX       ; Output hex digit.
                                        PLA             ; Restore A.
                        PRHEX:          AND #$0F        ; Mask LSD for hex print.
                                        ORA #'0'+$80    ; Add "0".
                                        CMP #$BA        ; Digit?
                                        BCC ECHO        ; Yes, output it.
                                        ADC #$06        ; Add offset for letter.
                        ECHO:           BIT DSP         ; DA bit (B7) cleared yet?
                                        BMI ECHO        ; No, wait for display.
                                        STA DSP         ; Output character. Sets DA.
                                        RTS             ; Return.
                        
                                        BRK             ; unused
                                        BRK             ; unused
                        
                        ; Interrupt Vectors
                        
                                        .WORD $0F00     ; NMI
                                        .WORD RESET     ; RESET
                                        .WORD $0000     ; BRK/IRQ


; +++ segments +++

#CODE          = $FF00 = 65280,  size =  ***VOID***  

; +++ global symbols +++

BACKSPACE = $FF00 = 65280          wozmon80.asm:46 (unused)
DSP       = $D012 = 53266          wozmon80.asm:22 (unused)
DSPCR     = $D013 = 53267          wozmon80.asm:23 (unused)
ESCAPE    = $FF00 = 65280          wozmon80.asm:41 (unused)
GETLINE   = $FF00 = 65280          wozmon80.asm:43 (unused)
H         = $0029 =    41          wozmon80.asm:12 (unused)
IN        = $0200 =   512          wozmon80.asm:19 (unused)
KBD       = $D010 = 53264          wozmon80.asm:20 (unused)
KBDCR     = $D011 = 53265          wozmon80.asm:21 (unused)
L         = $0028 =    40          wozmon80.asm:11 (unused)
MODE      = $002B =    43          wozmon80.asm:14 (unused)
NEXTCHAR  = $FF00 = 65280          wozmon80.asm:48 (unused)
NOTCR     = $FF00 = 65280          wozmon80.asm:35 (unused)
RESET     = $FF00 = 65280          wozmon80.asm:28 (unused)
STH       = $0027 =    39          wozmon80.asm:10 (unused)
STL       = $0026 =    38          wozmon80.asm:9 (unused)
XAMH      = $0025 =    37          wozmon80.asm:8 (unused)
XAML      = $0024 =    36          wozmon80.asm:7 (unused)
YSAV      = $002A =    42          wozmon80.asm:13 (unused)


total time: 0.0024 sec.
30 errors
