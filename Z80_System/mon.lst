                        ; --------------------------------------
                        ; zasm: assemble "mon.asm"
                        ; date: 2025-09-14 02:12:40
                        ; --------------------------------------


                        ;
0000:                   	org 	0000h
0000:                   rst:
0000: 310002   [10]     	ld 		sp, 0200h
0003: C31800   [20]     	jp  	main
                        ;
                        ;;
                        ; a  ... working reg.
                        ; b  ... dnjz counter
                        ; c  ... nibble value
                        ; de ... start address
                        ; hl ... end address
                        ; (ix).. the last inpu char/command
                        ;
                        	org 	0010h
0010: DD210301 [34]     	ld 		ix, mon_cmd
0014: DD360000 [53]     	ld 		(ix), 0
0018:                   main:
0018: 3E3E     [ 7]     	ld 		a, '>'
001A: D302     [18]     	out 	(2), a
001C: 3E20     [25]     	ld 		a, ' '
001E: D302     [36]     	out 	(2), a
0020:                   wait_next_char:
0020: CD8F00   [17]     	call 	getchar
0023: D302     [28]     	out 	(2), a 		; echo back
0025: 4F       [32]     	ld 		c, a
                        
0026: CDD600   [49]     	call 	hex2nibble
0029: FEFF     [56]     	cp 		$ff
002B: 2813     [63|68]  	jr 		z, cmd
002D: 4F       [67]     	ld 		c, a
002E:                   shift_in:
002E: CB11     [ 8]     	rl		c
0030: CB11     [16]     	rl		c
0032: CB11     [24]     	rl		c
0034: CB11     [32]     	rl		c
0036:                   _loop:
0036: CB11     [ 8]     	rl 		c
0038: CB13     [16]     	rl		e
003A: CB12     [24]     	rl 		d
003C: 10F8     [32|37]  	djnz 	_loop
003E: 18E0     [44]     	jr 		wait_next_char
                        
0040:                   cmd:
0040: 79       [ 4]     	ld 		a, c
0041: FE48     [11]     	cp 		'H'
0043: 2001     [18|23]  	jr 		nz, next_cmd1
                        
0045: 76       [22]     	halt
                        
0046:                   next_cmd1:
0046: FE52     [ 7]     	cp 		'R'
0048: 2002     [14|19]  	jr 		nz, next_cmd2
004A: D5       [25]     	push 	de
004B: C9       [35]     	ret
                        
004C:                   next_cmd2:
004C: FE2E     [ 7]     	cp 		'.'
004E: 2004     [14|19]  	jr 		nz, next3
0050: FFFFFFFF [58]     	ld 		(ix), mode_end
***ERROR***             	   		              ^ label "mode_end" not found
                        
0054:                   next3:
0054: FE0D     [ 7]     	cp 		$0d
0056: FFFF     [29]     	jr 		nz, next4
***ERROR***             	   		         ^ label "next4" not found
0058: 1802     [41]     	jr 		exec_command
                        
005A: 18BC     [53]     	jr 		main
                        
005C:                   exec_command:
005C: DD7E00   [19]     	ld 		a, (ix)
                        
005F: CD6400   [36]     	call 	dump_a_byte
0062: 18B4     [48]     	jr 		main
                        
                        ; dump memory b bytes from address stored in addrptr
0064:                   dump_a_byte:
0064: FFFFFF   [33]     	ld 		hl, (mon_ptr0)
***ERROR***             	   		             ^ label "mon_ptr0" not found
0067:                   dump_a_byte_loop:
0067: 7C       [ 4]     	ld 		a, h
0068: CD0001   [21]     	call 	print_a_hex
006B: 7D       [25]     	ld 		a, l
006C: CD0001   [42]     	call 	print_a_hex
006F: 3E20     [49]     	ld 		a, ' '
0071: D302     [60]     	out 	(2), a
0073: 3E3A     [67]     	ld 		a, ':'
0075: D302     [78]     	out 	(2), a
0077: 3E20     [85]     	ld 		a, ' '
0079: D302     [96]     	out 	(2), a
007B: 0610     [103]    	ld 		b, 16
007D:                   dump_16:
007D: 7E       [ 7]     	ld 		a, (hl)
007E: CD0001   [24]     	call 	print_a_hex
0081: 3E20     [31]     	ld 		a, ' '
0083: D302     [42]     	out 	(2), a
0085: 23       [48]     	inc 	hl
0086: 10F5     [56|61]  	djnz 	dump_16
0088:                   dump_a_byte_exit:
0088: FFFFFF   [33]     	ld 		(mon_ptr0), hl
***ERROR***             	   		         ^ label "mon_ptr0" not found
008B: CD1601   [50]     	call 	print_endl;
008E: C9       [60]     	ret
                        
                        ; read one character from con in 
                        ; returns ascii code in A reg.
008F:                   getchar:
008F: DB00     [11]     	in 		a, (0)
0091: A7       [15]     	and 	a 
0092: 28FB     [22|27]  	jr 		z, getchar
0094: DB01     [33]     	in 		a, (1)
0096: C9       [43]     	ret
                        
                        ; read and store line until the 1st occurrence of cr or nl
                        ; in (hl)
0097:                   getline:
0097: DB00     [11]     	in 		a, (0)		; con status
0099: A7       [15]     	and 	a			; 
009A: 28FB     [22|27]  	jr 		z, getline 	; repeat until available
009C: DB01     [33]     	in 		a, (1)		; getchar
009E: 77       [40]     	ld 		(hl), a		; store
009F: FE0A     [47]     	cp 		10			; if nl
00A1: 2807     [54|59]  	jr 		z, getline_end
00A3: FE0D     [61]     	cp 		13			; if cr
00A5: 2803     [68|73]  	jr 		z, getline_end
00A7: 23       [74]     	inc 	hl			; ++hl
00A8: 10ED     [82|87]  	djnz 	getline		; get next char
00AA:                   getline_end:
00AA: 3600     [10]     	ld 		(hl), 0		; terminate by null
00AC:                   getline_clrbuf:
00AC: DB00     [11]     	in 		a, (0)		; waste remaining chars in con buffer
00AE: A7       [15]     	and 	a
00AF: C8       [20|26]  	ret 	z
00B0: DB01     [31]     	in 		a, (1)
00B2: 18F8     [43]     	jr 		getline_clrbuf
                        
                        
                        ; read hexadecimal string upto 2 or 4 (set in c) 
                        ; bytes from (hl) and return integer val in de
                        ;
00B4:                   hexstr2_de:
00B4: 0E02     [ 7]     	ld 		c, 2
00B6: 1804     [19]     	jr 		hexstr_de
                        
00B8:                   hexstr4_de:
00B8: 0E04     [ 7]     	ld 		c, 4
00BA: 1800     [19]     	jr 		hexstr_de
                        
00BC:                   hexstr_de:
00BC: 110000   [10]         ld      de, 0000h
00BF:                   hexstr_de_lp:
00BF: 7E       [ 7]         ld      a, (hl)
00C0: CDD600   [24]     	call 	hex2nibble
00C3: FEFF     [31]     	cp 		$ff
00C5: C8       [36|42]  	ret 	z
00C6: A7       [40]     	and 	a		; clear Carry bit
00C7: 0604     [47]     	ld 		b, 4
00C9:                   hexstr_de_rl4:
00C9: CB13     [ 8]         rl      e		 ;rotate left entire de
00CB: CB12     [16]         rl      d
00CD: 10FA     [24|29]      djnz    hexstr_de_rl4
00CF: 83       [28]     	add 	e
00D0: 5F       [32]     	ld 		e, a
00D1: 23       [38]         inc     hl
00D2: 0D       [42]     	dec 	c
00D3: 20EA     [49|54]      jr      nz, hexstr_de_lp
00D5: C9       [59]     	ret
                        
                        ; convert one char expressing a hexadecimal digit 
                        ; in A reg. to nibble in A
                        ;
00D6:                   hex2nibble:
00D6: FE61     [ 7]         cp      'a'     ; check whether a lower case
00D8: 3802     [14|19]      jr      c, hex2nibble_digit_or_upper  ; a digit or an upper case if carry set
00DA: E6DF     [21]         and     $df     ; lower case to upper case
00DC:                   hex2nibble_digit_or_upper:
00DC: FE3A     [ 7]         cp      '9' + 1 ; check whether a digit
00DE: 3005     [14|19]      jr      nc, hex2nibble_upper  ; possibly an upper case letter if carry not set
00E0: D630     [21]         sub     a, '0'  ; digit to int value
00E2: 380C     [28|33]      jr      c, hex2nibble_err     ; it was not '0' - '9' 
00E4: C9       [38]         ret
00E5:                   hex2nibble_upper:
00E5: FE47     [ 7]         cp      'F'+1   ; check the digit whether less than 'F'
00E7: 3007     [14|19]      jr      nc, hex2nibble_err      ; error if it is larger than 'F'
00E9: D641     [21]         sub     'A'  	; A - F to integer 0 - 5
00EB: 3803     [28|33]      jr      c, hex2nibble_err       ; it was not 'A' - 'F'
00ED: C60A     [35]         add     a, 10   ; A - F to 10 - 15 by +5
00EF:                   hex2nibble_output:
00EF: C9       [10]         ret
                        
00F0:                   hex2nibble_err:
00F0: 3EFF     [ 7]     	ld 		a, 0xff
00F2: C9       [17]     	ret
                        
                        
                        
00F3:                   print_nibble_hex:
00F3: E60F     [ 7]     	and 	$0f
00F5: C630     [14]     	add 	'0'
00F7: FE3A     [21]     	cp 		':'
00F9: 3802     [28|33]  	jr 		c, print_nibble_hex_out
00FB: C607     [35]     	add 	7
00FD:                   print_nibble_hex_out:
00FD: D302     [11]     	out 	(2), a
00FF: C9       [21]     	ret
                        
0100:                   print_a_hex:
0100: 3E       [ 7]     	push 	af
0101: 20       [14|19]  	rlca
0102: 00       [18]     	rlca
0103: 00       [22]     	rlca
0104: 00       [26]     	rlca
0105: 000000   [38]     	call 	print_nibble_hex
0108: 00       [42]     	pop 	af
0109: 000000   [54]     	call 	print_nibble_hex
010C: 00       [58]     	ret
                        
010D:                   print_hl_str:
010D: 00       [ 4]     	ld	a, (HL)
010E: 00       [ 8]     	or	a
010F: 00       [12]     	ret	z
0110: 0000     [20]     	out	(2),a
0112: 00       [24]     	inc HL
0113: 000000   [36]     	jp	print_hl_str
                        
0116:                   print_endl:
0116: 0000     [ 8]     	ld 		a, 13
0118: 0000     [16]     	out		(2), a
011A: 0000     [24]     	ld 		a, 10
011C: 0000     [32]     	out 	(2), a
011E: 00       [36]     	ret
                        
                        
                        	org 	0100h
                        ; monitor working area
0100:                   prompt:
0100: 3E20              	db 	"> "
0102: 00                	db 	0
                        
0103:                   mon_cmd:
0103: 00                	db 		$0
0104:                   addrstart:
0104: 0000              	dw 		0000h
0106:                   addrend:
0106: 0000              	dw 		0000h
0108:                   inbuff:
0108: 00000000          	ds 		32,0
010C: 00...             


; +++ segments +++

#CODE          = $0000 =     0,  size = $0128 =   296

; +++ global symbols +++

_end              = $0128 =   296          mon.asm:2 (unused)
_loop             = $0036 =    54          mon.asm:37
_size             = $0128 =   296          mon.asm:2 (unused)
addrend           = $0106 =   262          mon.asm:241 (unused)
addrstart         = $0104 =   260          mon.asm:239 (unused)
cmd               = $0040 =    64          mon.asm:44
dump_16           = $007D =   125          mon.asm:90
dump_a_byte       = $0064 =   100          mon.asm:76
dump_a_byte_exit  = $0088 =   136          mon.asm:97 (unused)
dump_a_byte_loop  = $0067 =   103          mon.asm:78 (unused)
exec_command      = $005C =    92          mon.asm:69
getchar           = $008F =   143          mon.asm:104
getline           = $0097 =   151          mon.asm:113
getline_clrbuf    = $00AC =   172          mon.asm:127
getline_end       = $00AA =   170          mon.asm:125
hex2nibble        = $00D6 =   214          mon.asm:169
hex2nibble_digit_or_upper = $00DC =   220          mon.asm:173
hex2nibble_err    = $00F0 =   240          mon.asm:188
hex2nibble_output = $00EF =   239          mon.asm:185 (unused)
hex2nibble_upper  = $00E5 =   229          mon.asm:179
hexstr2_de        = $00B4 =   180          mon.asm:138 (unused)
hexstr4_de        = $00B8 =   184          mon.asm:142 (unused)
hexstr_de         = $00BC =   188          mon.asm:146
hexstr_de_lp      = $00BF =   191          mon.asm:148
hexstr_de_rl4     = $00C9 =   201          mon.asm:155
inbuff            = $0108 =   264          mon.asm:243 (unused)
main              = $0018 =    24          mon.asm:18
mode_end          = ***UNDEFINED***
mon_cmd           = $0103 =   259          mon.asm:237
mon_ptr0          = ***UNDEFINED***
next3             = $0054 =    84          mon.asm:62
next4             = ***UNDEFINED***
next_cmd1         = $0046 =    70          mon.asm:51
next_cmd2         = $004C =    76          mon.asm:57
print_a_hex       = $0100 =   256          mon.asm:204
print_endl        = $0116 =   278          mon.asm:223
print_hl_str      = $010D =   269          mon.asm:215
print_nibble_hex  = $00F3 =   243          mon.asm:194
print_nibble_hex_out = $00FD =   253          mon.asm:200
prompt            = $0100 =   256          mon.asm:233 (unused)
rst               = $0000 =     0          mon.asm:3 (unused)
shift_in          = $002E =    46          mon.asm:32 (unused)
wait_next_char    = $0020 =    32          mon.asm:23


; +++ used but undefined or unresolved labels +++

mode_end = ***undefined***
next4    = ***undefined***
mon_ptr0 = ***undefined***


total time: 0.0015 sec.
4 errors
